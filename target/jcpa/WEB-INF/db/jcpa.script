SET DATABASE UNIQUE NAME HSQLDB3A683CB6AD
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REGULAR NAMES TRUE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL TRANSLATE TTI TYPES TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL NULLS FIRST TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET DATABASE SQL LONGVAR IS LOB FALSE
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET FILES WRITE DELAY 500 MILLIS
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET SCHEMA PUBLIC
CREATE MEMORY TABLE PUBLIC.BENCHMARK(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,NAME VARCHAR(256) NOT NULL,DESCRIPT VARCHAR(10240),RESULT VARCHAR(10240),UNIQUE(NAME))
ALTER TABLE PUBLIC.BENCHMARK ALTER COLUMN ID RESTART WITH 3
CREATE MEMORY TABLE PUBLIC.PATTERN(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,NAME VARCHAR(256) NOT NULL,EXPRESSION VARCHAR(10240) NOT NULL,WARNING VARCHAR(1024) NOT NULL,CATEGORY VARCHAR(80) NOT NULL,EXAMPLE VARCHAR(10240),SCOPE VARCHAR(40) DEFAULT 'inner-class' NOT NULL,PRIORITY INTEGER DEFAULT 3 NOT NULL)
ALTER TABLE PUBLIC.PATTERN ALTER COLUMN ID RESTART WITH 18
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
SET SCHEMA PUBLIC
INSERT INTO BENCHMARK VALUES(1,'SetTester','Compare OP time between those two usage:\r\n\u0009Collections.synchronizedSet(new HashSet<String>());\r\n\u0009Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());','Threads:100\r\nRepeats per Thread:50\r\nReadWrite Rate:1.00\r\nread for Collections.synchronizedSet(new HashSet<String>()): latency=3650.0ns, throughput=273972.602739726op/s\r\nwrite for Collections.synchronizedSet(new HashSet<String>()): latency=171.0ns, throughput=5847953.216374269op/s\r\nread for Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>()): latency=131.0ns, throughput=7633587.786259542op/s\r\nwrite for Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>()): latency=97.0ns, throughput=1.0309278350515464E7op/s\r\n')
INSERT INTO BENCHMARK VALUES(2,'LockTester','Compare OP time between those two usage:\r\n\u0009Collections.synchronizedSet(new HashSet<String>());\r\n\u0009Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());','Threads:100\r\nRepeats per Thread:50\r\nReadWrite Rate:1.00\r\nread for Lock: latency=43024.0ns, throughput=23242.841204908887op/s\r\nwrite for Lock: latency=855.0ns, throughput=1169590.6432748537op/s\r\nread for Collections.synchronizedMap(new HashMap<String, Data>()): latency=573.0ns, throughput=1745200.6980802792op/s\r\nwrite for Collections.synchronizedMap(new HashMap<String, Data>()): latency=513.0ns, throughput=1949317.738791423op/s\r\n')
INSERT INTO PATTERN VALUES(1,'ExcessiveDetectionWithLengthOrSize','//BlockStatement\u000a  [\u000a  \u0009descendant::*/IfStatement/descendant::*[RelationalExpression]/descendant::*/Literal[@Image="0"]\u000a  ]\u000a  [\u000a  \u0009ends-with(descendant::*/IfStatement/descendant::*/Name/@Image,''.length'')\u000a  ]\u000a  [\u000a  \u0009starts-with(\u000a  \u0009descendant::*/IfStatement/descendant::*/Name/@Image,\u000a  \u0009concat(\u000a  \u0009preceding-sibling::*\u000a  \u0009[./LocalVariableDeclaration/Type/ReferenceType[@Array="true"]]\u000a  \u0009[count(./LocalVariableDeclaration/*/*/ArrayInitializer/*)=0]\u000a  \u0009/LocalVariableDeclaration/*/VariableDeclaratorId/@Image, ".")\u000a  \u0009)\u000a  ]\u000a  [\u000a  \u0009not(preceding-sibling::*[descendant::*/AssignmentOperator]) or\u000a  \u0009not(starts-with(\u000a  \u0009descendant::*/RelationalExpression/descendant::*/Name/@Image,\u000a  \u0009preceding-sibling::*[descendant::*/AssignmentOperator]\u000a  \u0009/descendant::*/PrimaryPrefix/Name/@Image))\u000a  ]\u000a  |\u000a  //BlockStatement\u000a  [\u000a  \u0009descendant::*/IfStatement/descendant::*[RelationalExpression]/descendant::*/Literal[@Image="0"]\u000a  ]\u000a  [\u000a  \u0009ends-with(descendant::*/IfStatement/descendant::*/Name/@Image,''.length'')\u000a  ]\u000a  [\u000a  \u0009starts-with(\u000a  \u0009descendant::*/IfStatement/descendant::*/Name/@Image,\u000a  \u0009concat(descendant::*/IfStatement/descendant::*/ForStatement/descendant::*/Name/@Image, ".")\u000a  \u0009)\u000a  ]\u000a |\u000a //BlockStatement\u000a [\u000a ends-with(\u000a descendant::*/IfStatement/Expression//RelationalExpression[@Image=">"][PrimaryExpression/PrimaryPrefix/Literal[@Image="0"]]\u000a /PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="0"]]/PrimaryPrefix/Name/@Image,''.size''\u000a )\u000a ]\u000a [\u000a starts-with(\u000a descendant::*/IfStatement/Expression//RelationalExpression[@Image=">"][PrimaryExpression/PrimaryPrefix/Literal[@Image="0"]]\u000a /PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="0"]]/PrimaryPrefix/Name/@Image,\u000a concat(\u000a descendant::*/IfStatement/descendant::*/ForStatement/descendant::*/Name/@Image, ".")\u000a )\u000a ]','It''s unnecessary to judge variable''s length or size before it was used in For Statement.','Legacy Usage','(1)public class ClassA{\u000a  \u0009void methodA() {\u000a  \u0009\u0009ClassA[] array = {};\u000a  \u0009\u0009if (array.length > 0) {\u000a  \u0009\u0009\u0009for (ClassA obj: array) {\u000a  \u0009\u0009\u0009\u0009//doSometing\u000a  \u0009\u0009\u0009}\u000a  \u0009\u0009}\u000a  \u0009}\u000a  }\u000a \u000a \u000a \uff082\uff09public class ClassA{\u000a   void methodA() {\u000a if (isNeedDeleteRememberMeCookie &amp;&amp; newCookies.size() > 0) {\u000a \u0009\u0009\u0009for (Cookie cookie : newCookies) {\u000a \u0009\u0009\u0009\u0009response.addCookie(cookie);\u000a \u0009\u0009\u0009}\u000a \u0009\u0009}\u000a  }\u000a }','inner-class',3)
INSERT INTO PATTERN VALUES(2,'ExcessiveIfStatementWithNull','//BlockStatement\u000a  [\u000a  \u0009descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Literal/NullLiteral\u000a  ]\u000a  [\u000a  \u0009descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/PrimaryPrefix/Name/@Image=\u000a                      preceding-sibling::*[descendant::*/AllocationExpression]/descendant::*/VariableDeclaratorId/@Image \u000a  ]\u000a  [\u000a  \u0009not(preceding-sibling::*[descendant::*/AssignmentOperator]) or\u000a  \u0009not(\u000a  \u0009descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Name/@Image=\u000a  \u0009preceding-sibling::*[descendant::*/AssignmentOperator]\u000a  \u0009/descendant::*/PrimaryPrefix/Name/@Image)\u000a  ]','It''s unnecessary to judge whether the variable was set null value after it was allocated.','Redundant Operations','public class ClassA{\u000a     void methodA() {\u000a       ClassA inst= new ClassA();\u000a       if (inst == null) {\u000a       //doSomething\u000a       }\u000a     }\u000a   }','inner-class',3)
INSERT INTO PATTERN VALUES(3,'ExplicitlyReclaimLocalVariable','//BlockStatement\u000a [Statement/StatementExpression/AssignmentOperator/following-sibling::*[self::Expression and position()=1]/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]\u000a [not(following-sibling::*/descendant::*/PrimaryPrefix/Name/@Image=descendant::*/PrimaryPrefix/Name/@Image)]','It''s unnecessary to set the local variable null value to reclaim the memory.','Memory Leak','public class ClassA{\u000a  \u0009void methodA() {\u000a  \u0009\u0009ClassA inst = new ClassA();\u000a  \u0009\u0009// method body\u000a  \u0009\u0009inst = null;\u000a  \u0009}\u000a  }','inner-class',4)
INSERT INTO PATTERN VALUES(4,'RepetiveMethodInvocationAsArgument','//PrimaryExpression\u000a [PrimarySuffix/Arguments[@ArgumentCount=0]]\u000a [ancestor::*/ArgumentList]\u000a [\u000a \u0009ancestor::*[self::BlockStatement]\u000a \u0009/preceding-sibling::*/descendant::*/\u000a \u0009PrimarySuffix/Arguments[@ArgumentCount=0]\u000a \u0009[ancestor::*/ArgumentList]\u000a \u0009/../../PrimaryPrefix/Name/@Image = ./PrimaryPrefix/Name/@Image\u000a ]','Repetive method invocations are arguments of other methods.','Duplicate Invocations','public class ClassA{\u000a  \u0009void methodA() {\u000a  \u0009\u0009ClassA inst = new ClassA();\u000a  \u0009\u0009one(inst.sum());\u000a  \u0009\u0009two(inst.sum());\u000a  \u0009\u0009three(inst.sum());\u000a  \u0009}\u000a  }','inner-class',2)
INSERT INTO PATTERN VALUES(5,'RepetiveMethodInvocationInDifferentMethod','//PrimaryExpression\u000a  [PrimarySuffix/Arguments[@ArgumentCount=0]]\u000a  [ancestor::*/VariableInitializer]\u000a  [\u000a  \u0009ancestor::*[self::ClassOrInterfaceBodyDeclaration]/following-sibling::*/descendant::*/PrimaryExpression\u000a  \u0009[PrimarySuffix/Arguments[@ArgumentCount=0]]\u000a  \u0009[\u000a  \u0009\u0009PrimaryPrefix/Name/@Image=./PrimaryPrefix/Name/@Image\u000a  \u0009\u0009and PrimarySuffix/@Image=./PrimarySuffix/@Image\u000a  \u0009\u0009and PrimarySuffix/Arguments[@ArgumentCount=1]/ArgumentList/descendant::*/PrimaryPrefix/Literal/@Image=\u000a  \u0009\u0009./PrimarySuffix/Arguments[@ArgumentCount=1]/ArgumentList/descendant::*/PrimaryPrefix/Literal/@Image\u000a  \u0009]\u000a  ]','Repetive method invocations are used in different method.','Duplicate Invocations','public class ClassA{\u000a  \u0009void methodA() {\u000a     \u0009\u0009HandlerFactory hf = HandlerFactory.getInstance().getHandler("A");\u000a  \u0009}\u000a  \u0009void methodB() {\u000a  \u0009\u0009HandlerFactory hf = HandlerFactory.getInstance().getHandler("A");\u000a  \u0009}\u000a  }','inner-class',2)
INSERT INTO PATTERN VALUES(6,'RepetiveBitOperation','//Expression\u000a  [\u000a  \u0009ConditionalAndExpression\u000a  \u0009[\u000a  \u0009\u0009count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1\u000a  \u0009]\u000a  \u0009or\u000a   \u0009ConditionalOrExpression\u000a  \u0009[\u000a  \u0009\u0009count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1\u000a  \u0009]\u000a  ]','Repetive bit operation can be merged.','Redundant Operations','public class ClassA{\u000a  \u0009void methodA() {\u000a  \u0009\u0009if (!A && !B && !C && !D) {\u000a  \u0009\u0009\u0009//doSomething\u000a  \u0009\u0009}\u000a  \u0009}\u000a  }','inner-class',3)
INSERT INTO PATTERN VALUES(7,'BrokenThreadStateWithMutiThreads','//ClassOrInterfaceBodyDeclaration\u000a  [descendant::*/ReferenceType/ClassOrInterfaceType[@Image = "Set" or @Image = "List"]]\u000a  [\u000a  \u0009descendant::*/Name[ends-with(@Image, ".add") or ends-with(@Image, ".remove")]\u000a  \u0009[count(ancestor::*/SynchronizedStatement)=0 and count(ancestor::*/MethodDeclaration[@Synchronized="true"])=0]\u000a  ]\u000a |\u000a //ClassOrInterfaceBodyDeclaration\u000a [ends-with(\u000a descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image,".putAll"\u000a )]\u000a [starts-with(\u000a descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image,concat(\u000a preceding-sibling::*/FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a /VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image\u000a ,''.''))]\u000a |\u000a //ClassOrInterfaceBodyDeclaration\u000a [\u000a descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix[@Image="putAll"]]/PrimarySuffix/@Image=\u000a preceding-sibling::*/FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a /VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image\u000a ]','It''ll be broken when there are multiple threads.','Corrupt Thread State','public class KeyHolder{\u000a  \u0009private Set<key> keys= new HashSet<key>();\u000a          private static int size = 500;\u000a          public void put(String key) {\u000a               int less = keys.size() - size;\u000a               for (Key key: keys) {\u000a                    if (less-- <= 0) break;\u000a                    keys.remove(key);\u000a                    \u000a               }\u000a               keys.add(key);\u000a          }\u000a  }','inner-class',1)
INSERT INTO PATTERN VALUES(8,'LegacyUsageBecomeNewForStatement','//BlockStatement\u000a  [\u000a  \u0009ends-with(descendant::*/ForStatement/descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="1"]]/PrimaryPrefix/Name/@Image,''.get'')\u000a  ]\u000a  [\u000a  \u0009starts-with(\u000a  \u0009descendant::*/ForStatement/descendant::*/BlockStatement/descendant::*/PrimaryPrefix/Name/@Image,\u000a  \u0009concat(preceding-sibling::*/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image=''List'' or @Image=''Set'']]/VariableDeclarator/VariableDeclaratorId/@Image, ".")\u000a  \u0009)\u000a  ]\u000a |\u000a //BlockStatement\u000a [ends-with(\u000a descendant::*/WhileStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount=0]]/PrimaryPrefix/Name/@Image,''.hasNext''\u000a )]\u000a [starts-with(\u000a descendant::*/WhileStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount=0]]/PrimaryPrefix/Name/@Image,\u000a concat(preceding-sibling::*/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Iterator"]]/VariableDeclarator[VariableInitializer/descendant::*/PrimarySuffix[@Image="iterator"]]/VariableDeclaratorId/@Image,".")\u000a )]','Legacy usage can be replaced with new ForStatement.','Legacy Usage','(1)public class ClassA{\u000a  \u0009void methodA() {\u000a  \u0009\u0009List queue = new ArrayList();\u000a  \u0009\u0009int size = queue.size();\u000a  \u0009\u0009for (int i=0; i< size; i++) {\u000a  \u0009\u0009\u0009ClassA inst = (ClassA) queue.get(i);\u000a  \u0009\u0009}\u000a  \u0009}\u000a  }\u000a \u000a \u000a (2)class A{\u000a public JSONObject toJSON() throws JSONException {\u000a Iterator<string> candidatesIterator = this.getCandidates().keySet().iterator();\u000a     \u0009JSONObject jsonCandidates = new JSONObject();\u000a     \u0009while(candidatesIterator.hasNext()){\u000a     \u0009\u0009String key = candidatesIterator.next();\u000a     \u0009\u0009jsonCandidates.put(key, this.getCandidates().get(key).toJSON());\u000a     \u0009}\u000a    }\u000a }','inner-class',2)
INSERT INTO PATTERN VALUES(9,'NoTargetTypeInArrayConversion','//CastExpression[Type/ReferenceType/ClassOrInterfaceType[@Image != "Object"]]//PrimaryExpression\u000a  [\u000a   PrimaryPrefix/Name[ends-with(@Image, ''.toArray'')]\u000a   and\u000a   PrimarySuffix/Arguments[count(*) = 0]\u000a  and\u000a  count(PrimarySuffix) = 1\u000a  ]','Array conversion does not specify target type.','Other','public class ClassA{\u000a  \u0009public void doSomething() {\u000a  \u0009\u0009Integer[] a = (Integer [])c.toArray();\u000a  \u0009}\u000a  }','inner-class',1)
INSERT INTO PATTERN VALUES(10,'ExcessivedActionInSynchronizedBlock','//ClassOrInterfaceBodyDeclaration\u000a  [\u000a  \u0009descendant::*/BlockStatement/descendant::*/SynchronizedStatement\u000a  \u0009[descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name[@Image="processItem"]]/PrimarySuffix/Arguments[@ArgumentCount>0]]\u000a  \u0009/descendant::*/PrimaryPrefix/Name/@Image=\u000a  \u0009preceding-sibling::*/FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/VariableDeclarator/VariableDeclaratorId/@Image\u000a  ]','Som Action Is Excessived In Synchronized Block','Excessive Synchronization','public class ClassA{\u000a  \u0009private Map<key,value> mapper = new HashMap<key, value="">();\u000a  \u0009public void put(Key k, Value v) {\u000a  \u0009\u0009synchronized(mapper) {\u000a  \u0009\u0009\u0009mapper.put(k,v);\u000a  \u0009\u0009\u0009processItem(k, v);\u000a                  }\u000a          }\u000a  }','inner-class',1)
INSERT INTO PATTERN VALUES(11,'ExcessivedRWLock','//ClassOrInterfaceBodyDeclaration\u000a  [\u000a  starts-with(MethodDeclaration/descendant::*/BlockStatement\u000a  [ends-with(preceding-sibling::*/descendant::*/PrimaryExpression[PrimarySuffix/Arguments]/PrimaryPrefix/Name/@Image,''.lock'')]\u000a  /descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments]/PrimaryPrefix/Name/@Image,\u000a  concat(preceding-sibling::*/FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/descendant::*/VariableDeclaratorId/@Image,''.''))\u000a  ]','It''s Excessived to use ReentrantReadWriteLock for Simple Action,Use synchronized Instead','Excessive Synchronization','class RWDictionary {\u000a      private final Map<string, data=""> m = new HashMap<string, data="">();\u000a      private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\u000a      private final Lock r = rwl.readLock();\u000a      private final Lock w = rwl.writeLock();\u000a  \u000a      public Data get(String key) {\u000a          r.lock();\u000a          try { return m.get(key); }\u000a          finally { r.unlock(); }\u000a      }\u000a      public String[] allKeys() {\u000a          r.lock();\u000a          try { return m.keySet().toArray(); }\u000a          finally { r.unlock(); }\u000a      }\u000a      public Data put(String key, Data value) {\u000a          w.lock();\u000a          try { return m.put(key, value); }\u000a          finally { w.unlock(); }\u000a      }\u000a      public void clear() {\u000a          w.lock();\u000a          try { m.clear(); }\u000a          finally { w.unlock(); }\u000a      }\u000a   }','inner-class',2)
INSERT INTO PATTERN VALUES(12,'SynchronizedSetIsExcessive','//BlockStatement/descendant::*/PrimaryExpression\u000a  [starts-with(PrimaryPrefix/Name/@Image,''Collections.'')]\u000a  [ends-with(PrimaryPrefix/Name/@Image,''.synchronizedSet'')]\u000a  /PrimarySuffix/Arguments[@ArgumentCount="1"]/ArgumentList/descendant::*/\u000a  AllocationExpression[ClassOrInterfaceType[@Image="HashSet"]]/Arguments[@ArgumentCount="0"]','SynchronizedSet Is Excessive,you can use ConcurrentHashMap instead','Excessive Synchronization','public class ClassA{\u000a  \u0009void methodA() {\u000a  \u0009\u0009Set safeSet= Collections.synchronizedSet(new HashSet());\u000a                 Set safeSet2=Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\u000a  \u0009}\u000a  }','inner-class',2)
INSERT INTO PATTERN VALUES(13,'LongRoundTripsInDifferentMethod','//ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration\u000a  [\u000a  count(\u000a  descendant::*/BlockStatement/descendant::*/PrimaryExpression[starts-with(PrimaryPrefix/Name/@Image,''serviceA.'')]\u000a  /PrimarySuffix/Arguments[@ArgumentCount="1"]\u000a  )>1\u000a  ]\u000a  [\u000a  descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="0"]]/PrimaryPrefix/Name/@Image=\u000a  following-sibling::*/MethodDeclaration[descendant::*/BlockStatement/descendant::*/PrimaryExpression[starts-with(PrimaryPrefix/Name/@Image,''serviceA.'')]\u000a  /PrimarySuffix/Arguments[@ArgumentCount="1"]]/MethodDeclarator/@Image\u000a  ]\u000a  |\u000a  //ClassOrInterfaceBody\u000a  [count(//ClassOrInterfaceBodyDeclaration\u000a  [count(descendant::*/BlockStatement/descendant::*/PrimaryExpression[starts-with(PrimaryPrefix/Name/@Image,''serviceA.'')]\u000a  /PrimarySuffix/Arguments[@ArgumentCount="1"])>=1\u000a  ] )>1\u000a  ]/ClassOrInterfaceBodyDeclaration\u000a  [\u000a  descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="0"]]/PrimaryPrefix/Name/@Image=\u000a  following-sibling::*/MethodDeclaration[descendant::*/BlockStatement/descendant::*/PrimaryExpression[starts-with(PrimaryPrefix/Name/@Image,''serviceA.'')]\u000a  /PrimarySuffix/Arguments[@ArgumentCount="1"]]/MethodDeclarator/@Image\u000a  ]','There are long round trips in different method.','Frequent IOs','public class ClassA{\u000a  \u0009public void methodA() {\u000a  \u0009\u0009serviceA.call(url1);\u000a  \u0009\u0009serviceA.call(url2);\u000a  \u0009\u0009methodB();\u000a  \u0009}\u000a  \u0009public void methodB() {\u000a  \u0009\u0009serviceA.call(url3);\u000a  \u0009\u0009serviceA.call(url4);\u000a  \u0009}\u000a  }','inner-class',1)
INSERT INTO PATTERN VALUES(14,'FrequentIOsUseForStatement','//Statement[ForStatement or WhileStatement or DoStatement]/descendant::*/Statement\u000a  [descendant::*/BlockStatement/descendant::*/PrimaryExpression[starts-with(PrimaryPrefix/Name/@Image,''DBManager.'')]\u000a  /PrimarySuffix/Arguments[@ArgumentCount="1"]]','To access database frequently for reading and writing data.','Frequent IOs','public class ClassA{\u000a  \u0009public void methodA() {\u000a  \u0009\u0009for (String key: keys) {\u000a  \u0009\u0009\u0009ClassA curRow = DBManager.getRowByID(key);\u000a  \u0009\u0009\u0009processRow(curRow);\u000a  \u0009\u0009}\u000a  \u0009}\u000a  }','inner-class',1)
INSERT INTO PATTERN VALUES(15,'InfiniteLoop','//BlockStatement\u000a  [count(Statement[ForStatement or WhileStatement or DoStatement]/descendant::*/BlockStatement/Statement[ForStatement or WhileStatement or DoStatement])>0]','the time complexity of infinite loop is too high.','Other','public class ClassA{\u000a  \u0009public void doSomething() {\u000a  \u0009\u0009int size = 100;\u000a  \u0009\u0009for (int i=0; i< size; i++) {\u000a  \u0009\u0009\u0009for (int j=0; j< size; j++){\u000a  \u0009\u0009\u0009\u0009//doSomething\u000a  \u0009\u0009\u0009}\u000a  \u0009\u0009}\u000a  \u0009}\u000a  }','inner-class',3)
INSERT INTO PATTERN VALUES(16,'RepetiveMethodInvocationAsStatement','//PrimaryExpression\u000a [PrimarySuffix/Arguments[@ArgumentCount=0]]\u000a [\u000a \u0009ancestor::*[self::Statement]/preceding-sibling::*/descendant::*/PrimaryExpression\u000a \u0009[PrimarySuffix/Arguments[@ArgumentCount=0]]/PrimaryPrefix/Name/@Image\u000a \u0009=./PrimaryPrefix/Name/@Image\u000a ]','Repetive method invocations are just statements or Assignment statements.','Duplicate Invocations','public class ClassA{\u000a \u0009public void put() {\u000a \u0009\u0009if(IdentityConstants.TRAIN_CONTEXT_TYPE.equalsIgnoreCase(assistantContext.getContextType())) {\u000a \u0009\u0009\u0009 ServiceSessionManager.getInstance().deleteServiceSession(AuthenticationContext.NAME);\u000a \u0009\u0009 } else {\u000a \u0009\u0009\u0009 ServiceSessionManager.getInstance().setServiceSession(assistantContext);\u000a \u0009\u0009\u0009 SPIContextManager.getSPIContext().registerServiceSessionParam(AssistantContext.NAME, assistantContext.getAttributes().get(IdentityConstants.TOKEN));\u000a \u0009\u0009 }\u0009\u000a         }\u000a }','inner-class',2)
INSERT INTO PATTERN VALUES(17,'NeverUsedMethod','//ClassOrInterfaceBodyDeclaration\u000a [MethodDeclaration/@Private="true"]\u000a [not(following-sibling::*/descendant::*/Name/@Image=MethodDeclaration/MethodDeclarator/@Image)]\u000a [not(preceding-sibling::*/descendant::*/Name/@Image=MethodDeclaration/MethodDeclarator/@Image)]','The method is never used.','Other','NeverUsedMethod','inner-class',1)
