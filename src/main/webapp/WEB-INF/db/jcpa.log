/*C2*/SET SCHEMA PUBLIC
DELETE FROM PATTERN WHERE ID=17
INSERT INTO PATTERN VALUES(17,'NeverUsedMethod','//ClassOrInterfaceBodyDeclaration\u000a[not(following-sibling::*/descendant::*/Name/@Image=MethodDeclaration/MethodDeclarator/@Image)]\u000a[not(preceding-sibling::*/descendant::*/Name/@Image=MethodDeclaration/MethodDeclarator/@Image)]\u000a/MethodDeclaration[@Private="true"]/MethodDeclarator','The method is never used.','Other','NeverUsedMethod','inner-class',1)
COMMIT
DELETE FROM PATTERN WHERE ID=14
INSERT INTO PATTERN VALUES(14,'FrequentIOsUseForStatement','//Statement[ForStatement]\u000a[\u000adescendant::*/Statement[descendant::*/BlockStatement/descendant::*/PrimaryExpression\u000a[starts-with(PrimaryPrefix/Name/@Image,''DBManager.'')]\u000a/PrimarySuffix/Arguments[@ArgumentCount="1"]/ArgumentList/descendant::*/PrimaryPrefix/Name/@Image=\u000aancestor::*/ForStatement/LocalVariableDeclaration/VariableDeclarator/VariableDeclaratorId/@Image]\u000a]','To access database frequently for reading and writing data.','Frequent IOs','public class ClassA{\u000a  \u0009public void methodA() {\u000a  \u0009\u0009for (String key: keys) {\u000a  \u0009\u0009\u0009ClassA curRow = DBManager.getRowByID(key);\u000a  \u0009\u0009\u0009processRow(curRow);\u000a  \u0009\u0009}\u000a  \u0009}\u000a  }','inner-class',1)
COMMIT
DELETE FROM PATTERN WHERE ID=5
INSERT INTO PATTERN VALUES(5,'RepetiveMethodInvocationInDifferentMethod','//PrimaryExpression\u000a[PrimarySuffix/Arguments[@ArgumentCount=0]]\u000a[ancestor::*/VariableInitializer]\u000a[\u000a\u0009ancestor::*[self::ClassOrInterfaceBodyDeclaration]/preceding-sibling::*/descendant::*/PrimaryExpression\u000a\u0009[PrimarySuffix/Arguments[@ArgumentCount=0]]\u000a\u0009[\u000a\u0009\u0009PrimaryPrefix/Name/@Image=./PrimaryPrefix/Name/@Image\u000a\u0009\u0009and PrimarySuffix/@Image=./PrimarySuffix/@Image\u000a\u0009\u0009and PrimarySuffix/Arguments[@ArgumentCount=1]/ArgumentList/descendant::*/PrimaryPrefix/Literal/@Image=\u000a\u0009\u0009./PrimarySuffix/Arguments[@ArgumentCount=1]/ArgumentList/descendant::*/PrimaryPrefix/Literal/@Image\u000a\u0009]\u000a]','Repetive method invocations are used in different method.','Duplicate Invocations','public class ClassA{\u000a  \u0009void methodA() {\u000a     \u0009\u0009HandlerFactory hf = HandlerFactory.getInstance().getHandler("A");\u000a  \u0009}\u000a  \u0009void methodB() {\u000a  \u0009\u0009HandlerFactory hf = HandlerFactory.getInstance().getHandler("A");\u000a  \u0009}\u000a  }','inner-class',1)
COMMIT
DELETE FROM PATTERN WHERE ID=7
INSERT INTO PATTERN VALUES(7,'BrokenThreadStateWithMutiThreads','//ClassOrInterfaceBodyDeclaration\u000a[FieldDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]]\u000a[\u000afollowing-sibling::*\u000a[MethodDeclaration]\u000a[count(descendant::*[@Synchronized="true"])=0]\u000a[count(descendant::*/SynchronizedStatement)=0]\u000a/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")\u000a]\u000a|\u000a//ClassOrInterfaceBodyDeclaration\u000a[FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId\u000a]\u000a[\u000afollowing-sibling::*\u000a[self::ClassOrInterfaceBodyDeclaration]\u000a[descendant::*/PrimaryExpression/PrimarySuffix[@Image="putAll"]]\u000a/descendant::*/PrimaryExpression[PrimarySuffix[@Image="putAll"]]/PrimarySuffix/@Image\u000a=\u000aFieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image\u000a]\u000a|\u000a//ClassOrInterfaceBodyDeclaration\u000a[FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId\u000a]\u000a[\u000astarts-with(\u000afollowing-sibling::*\u000a[self::ClassOrInterfaceBodyDeclaration]\u000a[descendant::*/PrimaryExpression/PrimaryPrefix/Name[ends-with(@Image,".putAll")]]\u000a/descendant::*/PrimaryExpression/PrimaryPrefix/Name[ends-with(@Image,".putAll")]/@Image\u000a,\u000aFieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image\u000a)\u000a]','It''ll be broken when there are multiple threads.','Corrupt Thread State','public class KeyHolder{\u000a  \u0009private Set<key> keys= new HashSet<key>();\u000a          private static int size = 500;\u000a          public void put(String key) {\u000a               int less = keys.size() - size;\u000a               for (Key key: keys) {\u000a                    if (less-- <= 0) break;\u000a                    keys.remove(key);\u000a                    \u000a               }\u000a               keys.add(key);\u000a          }\u000a  }','inner-class',1)
COMMIT
DELETE FROM PATTERN WHERE ID=10
INSERT INTO PATTERN VALUES(10,'ExcessivedActionInSynchronizedBlock','//ClassOrInterfaceBodyDeclaration\u000a  [\u000a  \u0009descendant::*/BlockStatement/descendant::*/SynchronizedStatement\u000a  \u0009[descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name[@Image="processItem"]]/PrimarySuffix/Arguments[@ArgumentCount>0]]\u000a  \u0009/descendant::*/PrimaryPrefix/Name/@Image=\u000a  \u0009preceding-sibling::*/FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/VariableDeclarator/VariableDeclaratorId/@Image\u000a  ]','Som Action Is Excessived In Synchronized Block.','Excessive Synchronization','public class ClassA{\u000a  \u0009private Map<key,value> mapper = new HashMap<key, value="">();\u000a  \u0009public void put(Key k, Value v) {\u000a  \u0009\u0009synchronized(mapper) {\u000a  \u0009\u0009\u0009mapper.put(k,v);\u000a  \u0009\u0009\u0009processItem(k, v);\u000a                  }\u000a          }\u000a  }','inner-class',1)
COMMIT
DELETE FROM PATTERN WHERE ID=10
INSERT INTO PATTERN VALUES(10,'ExcessivedActionInSynchronizedBlock','//ClassOrInterfaceBodyDeclaration\u000a  [\u000a  \u0009descendant::*/BlockStatement/descendant::*/SynchronizedStatement\u000a  \u0009[descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name[@Image="processItem"]]/PrimarySuffix/Arguments[@ArgumentCount>0]]\u000a  \u0009/descendant::*/PrimaryPrefix/Name/@Image=\u000a  \u0009preceding-sibling::*/FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/VariableDeclarator/VariableDeclaratorId/@Image\u000a  ]','Some Action Is Excessived In Synchronized Block.','Excessive Synchronization','public class ClassA{\u000a  \u0009private Map<key,value> mapper = new HashMap<key, value="">();\u000a  \u0009public void put(Key k, Value v) {\u000a  \u0009\u0009synchronized(mapper) {\u000a  \u0009\u0009\u0009mapper.put(k,v);\u000a  \u0009\u0009\u0009processItem(k, v);\u000a                  }\u000a          }\u000a  }','inner-class',1)
COMMIT
DELETE FROM PATTERN WHERE ID=10
INSERT INTO PATTERN VALUES(10,'ExcessivedActionInSynchronizedBlock','//ClassOrInterfaceBodyDeclaration\u000a  [\u000a  \u0009descendant::*/BlockStatement/descendant::*/SynchronizedStatement\u000a  \u0009[descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name[@Image="processItem"]]/PrimarySuffix/Arguments[@ArgumentCount>0]]\u000a  \u0009/descendant::*/PrimaryPrefix/Name/@Image=\u000a  \u0009preceding-sibling::*/FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/VariableDeclarator/VariableDeclaratorId/@Image\u000a  ]','Some actions are excessived in synchronized block.','Excessive Synchronization','public class ClassA{\u000a  \u0009private Map<key,value> mapper = new HashMap<key, value="">();\u000a  \u0009public void put(Key k, Value v) {\u000a  \u0009\u0009synchronized(mapper) {\u000a  \u0009\u0009\u0009mapper.put(k,v);\u000a  \u0009\u0009\u0009processItem(k, v);\u000a                  }\u000a          }\u000a  }','inner-class',1)
COMMIT
DELETE FROM PATTERN WHERE ID=11
INSERT INTO PATTERN VALUES(11,'ExcessivedRWLock','//ClassOrInterfaceBodyDeclaration\u000a  [\u000a  starts-with(MethodDeclaration/descendant::*/BlockStatement\u000a  [ends-with(preceding-sibling::*/descendant::*/PrimaryExpression[PrimarySuffix/Arguments]/PrimaryPrefix/Name/@Image,''.lock'')]\u000a  /descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments]/PrimaryPrefix/Name/@Image,\u000a  concat(preceding-sibling::*/FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/descendant::*/VariableDeclaratorId/@Image,''.''))\u000a  ]','It''s excessived to use ReentrantReadWriteLock for simple action. Use synchronized instead.','Excessive Synchronization','class RWDictionary {\u000a      private final Map<string, data=""> m = new HashMap<string, data="">();\u000a      private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\u000a      private final Lock r = rwl.readLock();\u000a      private final Lock w = rwl.writeLock();\u000a  \u000a      public Data get(String key) {\u000a          r.lock();\u000a          try { return m.get(key); }\u000a          finally { r.unlock(); }\u000a      }\u000a      public String[] allKeys() {\u000a          r.lock();\u000a          try { return m.keySet().toArray(); }\u000a          finally { r.unlock(); }\u000a      }\u000a      public Data put(String key, Data value) {\u000a          w.lock();\u000a          try { return m.put(key, value); }\u000a          finally { w.unlock(); }\u000a      }\u000a      public void clear() {\u000a          w.lock();\u000a          try { m.clear(); }\u000a          finally { w.unlock(); }\u000a      }\u000a   }','inner-class',1)
COMMIT
DELETE FROM PATTERN WHERE ID=12
INSERT INTO PATTERN VALUES(12,'SynchronizedSetIsExcessive','//BlockStatement/descendant::*/PrimaryExpression\u000a  [starts-with(PrimaryPrefix/Name/@Image,''Collections.'')]\u000a  [ends-with(PrimaryPrefix/Name/@Image,''.synchronizedSet'')]\u000a  /PrimarySuffix/Arguments[@ArgumentCount="1"]/ArgumentList/descendant::*/\u000a  AllocationExpression[ClassOrInterfaceType[@Image="HashSet"]]/Arguments[@ArgumentCount="0"]','SynchronizedSet is excessive, you can use ConcurrentHashMap instead.','Excessive Synchronization','public class ClassA{\u000a  \u0009void methodA() {\u000a  \u0009\u0009Set safeSet= Collections.synchronizedSet(new HashSet());\u000a                 Set safeSet2=Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\u000a  \u0009}\u000a  }','inner-class',1)
COMMIT
DELETE FROM PATTERN WHERE ID=15
INSERT INTO PATTERN VALUES(15,'InfiniteLoop','//BlockStatement\u000a  [count(Statement[ForStatement or WhileStatement or DoStatement]/descendant::*/BlockStatement/Statement[ForStatement or WhileStatement or DoStatement])>0]','The time complexity of the infinite loop is too high.','Other','public class ClassA{\u000a  \u0009public void doSomething() {\u000a  \u0009\u0009int size = 100;\u000a  \u0009\u0009for (int i=0; i< size; i++) {\u000a  \u0009\u0009\u0009for (int j=0; j< size; j++){\u000a  \u0009\u0009\u0009\u0009//doSomething\u000a  \u0009\u0009\u0009}\u000a  \u0009\u0009}\u000a  \u0009}\u000a  }','inner-class',1)
COMMIT
