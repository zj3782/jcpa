SET DATABASE UNIQUE NAME HSQLDB3A683CB6AD
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REGULAR NAMES TRUE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL TRANSLATE TTI TYPES TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL NULLS FIRST TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET DATABASE SQL LONGVAR IS LOB FALSE
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET FILES WRITE DELAY 500 MILLIS
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET SCHEMA PUBLIC
CREATE MEMORY TABLE PUBLIC.BENCHMARK(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,NAME VARCHAR(256) NOT NULL,DESCRIPT VARCHAR(10240),RESULT VARCHAR(10240),UNIQUE(NAME))
ALTER TABLE PUBLIC.BENCHMARK ALTER COLUMN ID RESTART WITH 5
CREATE MEMORY TABLE PUBLIC.PATTERN(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,NAME VARCHAR(256) NOT NULL,EXPRESSION VARCHAR(51200) NOT NULL,WARNING VARCHAR(10240) NOT NULL,CATEGORY VARCHAR(80) NOT NULL,EXAMPLE VARCHAR(51200),SCOPE VARCHAR(40) DEFAULT 'inner-class' NOT NULL,PRIORITY INTEGER DEFAULT 3 NOT NULL,AUX VARCHAR(51200),PATTERNTYPE VARCHAR(256) DEFAULT 'xptah' NOT NULL,JAVACLASS VARCHAR(1024) DEFAULT '')
ALTER TABLE PUBLIC.PATTERN ALTER COLUMN ID RESTART WITH 20
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
SET SCHEMA PUBLIC
INSERT INTO BENCHMARK VALUES(1,'SetTester','Compare OP time between those two usage:\r\n\u0009Collections.synchronizedSet(new HashSet<String>());\r\n\u0009Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());','Threads:100\u000d\u000aRepeats per Thread:500\u000d\u000aReadWrite Rate:1.00\u000d\u000aread for Collections.synchronizedSet(new HashSet<String>()): latency=299ns, throughput=3344481op/s\u000d\u000awrite for Collections.synchronizedSet(new HashSet<String>()): latency=200ns, throughput=5000000op/s\u000d\u000aread for Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>()): latency=161ns, throughput=6211180op/s\u000d\u000awrite for Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>()): latency=143ns, throughput=6993006op/s\u000d\u000a')
INSERT INTO BENCHMARK VALUES(2,'LockTester','Compare OP time between those two usage:\r\n\u0009Collections.synchronizedSet(new HashSet<String>());\r\n\u0009Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());','Threads:100\u000d\u000aRepeats per Thread:500\u000d\u000aReadWrite Rate:1.00\u000d\u000aread for Lock: latency=2429ns, throughput=411692op/s\u000d\u000awrite for Lock: latency=4135ns, throughput=241837op/s\u000d\u000aread for Collections.synchronizedMap(new HashMap<String, Data>()): latency=408ns, throughput=2450980op/s\u000d\u000awrite for Collections.synchronizedMap(new HashMap<String, Data>()): latency=3737ns, throughput=267594op/s\u000d\u000a')
INSERT INTO PATTERN VALUES(1,'ProbeSizeOfArrayOrCollectionBeforeForStatement','//BlockStatement\u000a[\u000adescendant::*/IfStatement/descendant::*[RelationalExpression]/descendant::*/Literal[@Image="0"]\u000a]\u000a[\u000aends-with(descendant::*/IfStatement/descendant::*/Name/@Image,''.length'')\u000a]\u000a[starts-with(\u000adescendant::*/IfStatement/descendant::*/Name/@Image,\u000aconcat(descendant::*/IfStatement/descendant::*/ForStatement/descendant::*/Name/@Image, ".")\u000a)]\u000a|\u000a//BlockStatement\u000a[\u000aends-with(\u000adescendant::*/IfStatement/Expression//RelationalExpression[@Image=">"][PrimaryExpression/PrimaryPrefix/Literal[@Image="0"]]\u000a/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount="0"]]/Name/@Image,''.size''\u000a)]\u000a[starts-with(\u000adescendant::*/IfStatement/Expression//RelationalExpression[@Image=">"][PrimaryExpression/PrimaryPrefix/Literal[@Image="0"]]\u000a/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount="0"]]/Name/@Image,\u000aconcat(\u000adescendant::*/IfStatement/descendant::*/ForStatement/descendant::*/Name/@Image, ".")\u000a)]','It is unnecessary to evaluate the size.','RedundantStatement','public class ProbeSizeOfArrayOrCollectionBeforeForStatement {\u000a    String[] sampleArr = { "A", "B", "C", "D", "E" };\u000a    Collection<String> sampleCollection = Arrays.asList(sampleArr);\u000a\u000a    public void correctTestifyLength() {\u000a        String[] parts = "en_US".split("_");\u000a        List<String> partsList = null;\u000a        if (parts.length > 0) {\u000a            partsList = Arrays.asList(parts);\u000a        }\u000a        assert (partsList != null);\u000a\u000a    }\u000a\u000a    public void correctIterateArray() {\u000a        if (sampleArr != null) {\u000a            for (String element : sampleArr) {\u000a                assert (element != null);\u000a            }\u000a        }\u000a        if (sampleCollection != null) {\u000a            for (String element : sampleCollection) {\u000a                assert (element != null);\u000a            }\u000a        }\u000a\u000a    }\u000a\u000a    public void wrongIterateArray() {\u000a        if (sampleArr.length > 0) {\u000a            for (String element : sampleArr) {\u000a                assert (element != null);\u000a            }\u000a        }\u000a        if (sampleCollection.size() > 0) {\u000a            for (String element : sampleCollection) {\u000a                assert (element != null);\u000a            }\u000a        }\u000a    }\u000a}','inner-class',3,'','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(2,'UnnecessaryLogicalJudgement','//BlockStatement\u000a[\u000aStatement/IfStatement/descendant::*[EqualityExpression]/descendant::*/Literal/NullLiteral\u000a]\u000a[\u000adescendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/PrimaryPrefix/Name/@Image=\u000apreceding-sibling::*[descendant::*/AllocationExpression]/descendant::*/VariableDeclaratorId/@Image \u000a]\u000a[\u000anot(preceding-sibling::*[descendant::*/AssignmentOperator]) or\u000anot(descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Name/@Image=\u000apreceding-sibling::*[descendant::*/AssignmentOperator]/descendant::*/PrimaryPrefix/Name/@Image)\u000a]\u000a|\u000a//BlockStatement\u000a[\u000aStatement/IfStatement/descendant::*/EqualityExpression[@Image="=="]\u000a[descendant::*/Literal/NullLiteral]/PrimaryExpression/PrimaryPrefix/Name/@Image=\u000apreceding-sibling::*/LocalVariableDeclaration/VariableDeclarator[descendant::*/Literal/NullLiteral]/VariableDeclaratorId/@Image\u000a]\u000a[\u000anot(preceding-sibling::*[descendant::*/AssignmentOperator]) or\u000anot(descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Name/@Image=\u000apreceding-sibling::*[descendant::*/AssignmentOperator]/descendant::*/PrimaryPrefix/Name/@Image)\u000a]\u000a|\u000a//BlockStatement\u000a[\u000aStatement/IfStatement/Expression/EqualityExpression[@Image="!="][PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]/PrimaryExpression/PrimaryPrefix/Name/@Image=\u000apreceding-sibling::*/LocalVariableDeclaration/VariableDeclarator\u000a[VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/Literal]\u000a[not(descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments]/Name)]\u000a[not(descendant::*/Literal/NullLiteral)]\u000a/VariableDeclaratorId/@Image]\u000a[\u000anot(preceding-sibling::*[descendant::*/AssignmentOperator]) or\u000anot(descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Name/@Image=\u000apreceding-sibling::*[descendant::*/AssignmentOperator]/descendant::*/PrimaryPrefix/Name/@Image)\u000a]','It is unnecessary to evaluate logical expression.','RedundantStatement','public class UnnecessaryLogicalJudgement {\u000a    public InputStream correctTestVariable() {\u000a        Properties prop = new Properties();\u000a        InputStream is = this.getClass().getClassLoader().getResourceAsStream(\u000a            "resources/messages.properties");\u000a        if (is != null) {\u000a            try {\u000a                prop.load(is);\u000a            } catch (IOException e) {\u000a            }\u000a        }\u000a        return is;\u000a    }\u000a\u000a    public String correctTestConstant() {\u000a        String signal = null;\u000a        Scanner in = new Scanner(System.in);\u000a        String what = in.nextLine();\u000a        if (what == "Yes" || what == "No") {\u000a            signal = what;\u000a        }\u000a        return signal;\u000a    }\u000a\u000a    public String wrongTestConstant1() {\u000a        String signal = null;\u000a        Scanner in = new Scanner(System.in);\u000a        String what = in.nextLine();\u000a        if (signal == null) {\u000a            if (what == "Yes" || what == "No") {\u000a                signal = what;\u000a            }\u000a        }\u000a        return signal;\u000a    }\u000a\u000a    public String wrongTestConstant2() {\u000a        String signal = "Yes";\u000a        Scanner in = new Scanner(System.in);\u000a        String what = in.nextLine();\u000a        if (signal != null) {\u000a            if (what == "Yes" || what == "No") {\u000a                signal = what;\u000a            }\u000a        }\u000a        return signal;\u000a    }\u000a}','inner-class',3,'','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(3,'ReclaimMemorySpace','//BlockStatement\u000a[Statement/StatementExpression/AssignmentOperator/following-sibling::*[self::Expression and position()=1]/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]\u000a[not(ancestor::*/following-sibling::*/descendant::*/PrimaryPrefix/Name/@Image=descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/PrimaryPrefix/Name/@Image=descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(ancestor::ClassOrInterfaceBodyDeclaration/ConstructorDeclaration/FormatParameters/@ParameterCount="0")]','Local variable is explicitly reclaimed.','RedundantInvocation','public class ReclaimMemorySpace {\u000a    private String field;\u000a\u000a    // It is correct\u000a    public ReclaimMemorySpace() {\u000a        String field = null;\u000a    }\u000a\u000a    public String correctSetNull() {\u000a        String question = "?";\u000a        Scanner in = new Scanner(System.in);\u000a        String what = in.nextLine();\u000a        if (!(what == "Yes" || what == "No")) {\u000a            question = null;\u000a        } else {\u000a            question = what + question;\u000a        }\u000a        return question;\u000a    }\u000a\u000a    public String wrongSetNull() {\u000a        String question = "?";\u000a        Scanner in = new Scanner(System.in);\u000a        String what = in.nextLine() + question;\u000a        question = null;\u000a        return what;\u000a    }\u000a}','inner-class',3,'','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(4,'CallExpensiveFunctionTwiceOrMoreInClass','//MethodDeclaration/Block/BlockStatement\u000a/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name\u000a[\u000a@Image=\u000apreceding::*\u000a/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name/@Image\u000a]\u000a[not(##AUX_END##)]\u000a[not(contains(@Image,".get") or contains(@Image,".set"))]','Function result is not preserved.','RedundantInvocation','\uff081\uff09public class CallExpensiveFunctionTwiceOrMoreInMethod {\u000a\u000a    private long factorial(long n) {\u000a        if (n == 1) {\u000a            return 1;\u000a        } else {\u000a            return n * factorial(n - 1);\u000a        }\u000a    }\u000a\u000a    public long correctCallFunctions() {\u000a        long part1 = factorial(4);\u000a        long part2 = factorial(5);\u000a        return part1 + part2;\u000a    }\u000a\u000a    public long wrongCallFunctions() {\u000a        long part1 = factorial(6);\u000a        long part2 = factorial(6);\u000a        return part1 + part2;\u000a    }\u000a}\u000a\u000a\uff082\uff09public class CallExpensiveStatementTwiceOrMoreInClass {\u000a\u000a    MethodFactory mf = MethodFactory.getInstance();\u000a\u000a    String correctGetRed() {\u000a        return mf.getColor(true);\u000a    }\u000a\u000a    String correctGetGray() {\u000a        return mf.getColor(false);\u000a    }\u000a    \u000a    String wrongGetRed() {\u000a        return MethodFactory.getInstance().getColor(true);\u000a    }\u000a\u000a    String WrongGetGray() {\u000a        return MethodFactory.getInstance().getColor(false);\u000a    }\u000a}','inner-class',2,'factorial,MethodFactory.getInstance','java','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(5,'SuboptimalLogicalExpression','//Expression\u000a[\u000a    ConditionalAndExpression\u000a    [\u000a        count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1\u000a    ]\u000a    or AndExpression\u000a    [\u000a        count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1\u000a    ]\u000a        or ConditionalOrExpression\u000a    [\u000a        count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1\u000a    ]\u000a    or InclusiveOrExpression\u000a    [\u000a        count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1\u000a    ]\u000a]','! Operators are not reduced.','SuboptimalStatement','public class SuboptimalLogicalExpression {\u000a    public boolean correctExpression() {\u000a        boolean l = true;\u000a        boolean r = false;\u000a        boolean m = true;\u000a        return (!(l | r | m));\u000a    }\u000a\u000a    public boolean wrongExpression() {\u000a        boolean l = true;\u000a        boolean r = false;\u000a        boolean m = true;\u000a        return (!l & !r & !m);\u000a    }\u000a}','inner-class',3,'','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(6,'OperateUnsynchronizedCollection','//ClassOrInterfaceBodyDeclaration\u000a[\u000aFieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId\u000a]\u000a[\u000afollowing-sibling::*\u000a[self::ClassOrInterfaceBodyDeclaration]\u000a[descendant::*/PrimaryExpression/PrimarySuffix[@Image="putAll"]]\u000a/descendant::*/PrimaryExpression[PrimarySuffix[@Image="putAll"]]/PrimarySuffix/@Image\u000a=\u000aFieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image\u000a]\u000a|\u000a//ClassOrInterfaceBodyDeclaration\u000a[\u000aFieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId\u000a]\u000a[starts-with(\u000afollowing-sibling::*[self::ClassOrInterfaceBodyDeclaration]\u000a[descendant::*/PrimaryExpression/PrimaryPrefix/Name[ends-with(@Image,".putAll")]]\u000a/descendant::*/PrimaryExpression/PrimaryPrefix/Name[ends-with(@Image,".putAll")]/@Image\u000a,\u000aFieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]\u000a/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image\u000a)]\u000a|\u000a//ClassOrInterfaceBodyDeclaration\u000a[not(\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]\u000a/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image\u000a=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression\u000a[Expression/PrimaryExpression/PrimarySuffix/Arguments[@ArgumentCount=1]/\u000adescendant::*/ClassOrInterfaceType[@Image="ConcurrentHashMap"]/TypeArguments\u000a]/PrimaryExpression/PrimaryPrefix/Name/@Image)\u000a]\u000a[\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]\u000a/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image\u000a=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression\u000a[Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType]\u000a/PrimaryExpression/PrimaryPrefix/Name/@Image\u000a]\u000a[\u000afollowing-sibling::*[MethodDeclaration]\u000a[count(descendant::*[@Synchronized="true"])=0]\u000a[count(descendant::*/SynchronizedStatement)=0]\u000a/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")\u000a]\u000a|\u000a//ClassOrInterfaceBodyDeclaration\u000a[not(\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="List"]\u000a/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image\u000a=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression\u000a[Expression/PrimaryExpression/PrimaryPrefix\u000a[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=1]]\u000a/Name[@Image="Collections.synchronizedList"]]\u000a/PrimaryExpression/PrimaryPrefix/Name/@Image)\u000a]\u000a[\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="List"]\u000a/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image\u000a=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression\u000a[Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType]\u000a/PrimaryExpression/PrimaryPrefix/Name/@Image\u000a]\u000a[\u000afollowing-sibling::*[MethodDeclaration]\u000a[count(descendant::*[@Synchronized="true"])=0]\u000a[count(descendant::*/SynchronizedStatement)=0]\u000a/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")\u000a]\u000a|\u000a//ClassOrInterfaceBodyDeclaration\u000a[not(\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map"]\u000a/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image\u000a=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression\u000a[Expression/PrimaryExpression/PrimaryPrefix\u000a[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=1]]\u000a/Name[@Image="Collections.synchronizedMap"]]\u000a/PrimaryExpression/PrimaryPrefix/Name/@Image)\u000a]\u000a[\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map"]\u000a/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image\u000a=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression\u000a[Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType]\u000a/PrimaryExpression/PrimaryPrefix/Name/@Image\u000a]\u000a[\u000afollowing-sibling::*[MethodDeclaration]\u000a[count(descendant::*[@Synchronized="true"])=0]\u000a[count(descendant::*/SynchronizedStatement)=0]\u000a/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".put")\u000a]\u000a|\u000a//ClassOrInterfaceBodyDeclaration\u000a[not(\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]\u000a/descendant::*/TypeArgument]/VariableDeclarator/VariableInitializer/\u000aExpression/PrimaryExpression/PrimarySuffix/Arguments[@ArgumentCount=1]/\u000adescendant::*/ClassOrInterfaceType[@Image="ConcurrentHashMap"]/TypeArguments)\u000a]\u000a[\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]/descendant::*/TypeArgument]\u000a/VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression\u000a]\u000a[\u000afollowing-sibling::*[MethodDeclaration]\u000a[count(descendant::*[@Synchronized="true"])=0]\u000a[count(descendant::*/SynchronizedStatement)=0]\u000a/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")\u000a]\u000a|\u000a//ClassOrInterfaceBodyDeclaration\u000a[not(\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="List"]\u000a/descendant::*/TypeArgument]/VariableDeclarator/VariableInitializer/\u000aExpression/PrimaryExpression/PrimarySuffix[preceding-sibling::*[position()=1 and self::PrimaryPrefix]/Name[@Image="Collections.synchronizedList"]]/Arguments)\u000a]\u000a[\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="List"]/descendant::*/TypeArgument]\u000a/VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression\u000a]\u000a[\u000afollowing-sibling::*[MethodDeclaration]\u000a[count(descendant::*[@Synchronized="true"])=0]\u000a[count(descendant::*/SynchronizedStatement)=0]\u000a/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")\u000a]\u000a|\u000a//ClassOrInterfaceBodyDeclaration\u000a[not(\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map"]\u000a/descendant::*/TypeArgument]/VariableDeclarator/VariableInitializer/\u000aExpression/PrimaryExpression/PrimarySuffix[preceding-sibling::*[position()=1 and self::PrimaryPrefix]/Name[@Image="Collections.synchronizedMap"]]/Arguments)\u000a]\u000a[\u000aFieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map"]/descendant::*/TypeArgument]\u000a/VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression\u000a]\u000a[\u000afollowing-sibling::*[MethodDeclaration]\u000a[count(descendant::*[@Synchronized="true"])=0]\u000a[count(descendant::*/SynchronizedStatement)=0]\u000a/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".put")\u000a]','Object is not synchronized.','UnsafeDataAccess','public class OperateUnsynchronizedCollection {\u000a    Set<String> unsafeSet = null;\u000a    List<String> unsafeList = null;\u000a    Map<String, String> unsafeMap = null;\u000a\u000a    Set<String> safeSet = null;\u000a    List<String> safeList = null;\u000a    Map<String, String> safeMap = null;\u000a\u000a    OperateUnsynchronizedCollection() {\u000a        unsafeSet = new HashSet<String>();\u000a        safeSet = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\u000a        unsafeList = new ArrayList<String>();\u000a        safeList = Collections.synchronizedList(new ArrayList<String>());\u000a        unsafeMap = new HashMap<String, String>();\u000a        safeMap = Collections.synchronizedMap(new HashMap<String, String>());\u000a    }\u000a\u000a    public void correctPutSafeSet() {\u000a        safeSet.add("A");\u000a        safeList.add("A");\u000a        safeMap.put("K", "V");\u000a    }\u000a\u000a    public void CorrectPutUnsafeSet() {\u000a        synchronized (unsafeSet) {\u000a            safeSet.add("A");\u000a        }\u000a\u000a        synchronized (unsafeSet) {\u000a            safeList.add("A");\u000a        }\u000a\u000a        synchronized (safeMap) {\u000a            safeMap.put("K", "V");\u000a        }\u000a    }\u000a\u000a    public void wrongPutUnsafeSet() {\u000a        unsafeSet.add("A");\u000a        unsafeList.add("A");\u000a        unsafeMap.put("K", "V");\u000a    }\u000a}','inner-class',1,'','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(7,'LegacyUsageForLoop','//BlockStatement\u000a[\u000adescendant::*/ForStatement/Expression\u000a/RelationalExpression/PrimaryExpression[2]/PrimaryPrefix/Name/@Image=\u000apreceding-sibling::*/LocalVariableDeclaration/VariableDeclarator\u000a[ends-with(VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image,".length")]\u000a[starts-with(VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image,concat(\u000aancestor::BlockStatement/preceding-sibling::*/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="String"]]/VariableDeclarator/VariableDeclaratorId/@Image,"."))]\u000a[starts-with(VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image,concat(\u000aancestor::BlockStatement/following-sibling::*/descendant::*/ForStatement/Statement/descendant::*/BlockStatement\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/PrimaryExpression[not(ancestor::*/PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/PrimaryExpression[not(ancestor::*/PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a/descendant::*/Expression/descendant::*/PrimaryExpression\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/Expression/descendant::*/PrimaryExpression\u000a[not(preceding-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/Expression/descendant::*/PrimaryExpression\u000a[not(preceding-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a/PrimaryPrefix\u000a[following-sibling::*[position()=1 and self::PrimarySuffix]/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=\u000aancestor::Statement/preceding-sibling::*[position()=1 and self::ForUpdate]/descendant::*/PrimaryPrefix/Name/@Image]\u000a/Name/@Image,"."))]\u000a/VariableDeclaratorId/@Image\u000a]\u000a|\u000a//BlockStatement\u000a[\u000astarts-with(descendant::*/ForStatement/Expression/RelationalExpression/PrimaryExpression[2]/PrimaryPrefix/Name/@Image,\u000aprevious-sibiling/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="String"]]/VariableDeclarator/VariableDeclaratorId/@Image)\u000a]\u000a[\u000aends-with(descendant::*/ForStatement/Expression/RelationalExpression/PrimaryExpression[2]/PrimaryPrefix/Name/@Image,".length")\u000a]\u000a[\u000adescendant::*/ForStatement[starts-with(Expression/RelationalExpression/PrimaryExpression[2]/PrimaryPrefix/Name/@Image,\u000aconcat(Statement/descendant::*/BlockStatement\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/PrimaryExpression[not(ancestor::*/PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/PrimaryExpression[not(ancestor::*/PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a/descendant::*/Expression/descendant::*/PrimaryExpression\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/ArgumentList/Expression/descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::*/descendant::*/Expression/descendant::*/PrimaryExpression\u000a[not(preceding-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::*/descendant::*/Expression/descendant::*/PrimaryExpression\u000a[not(preceding-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(preceding-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a[not(following-sibling::PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Name/@Image=ancestor::*/ForUpdate/descendant::*/PrimaryPrefix/Name/@Image)]\u000a/PrimaryPrefix\u000a[following-sibling::*[position()=1 and self::PrimarySuffix]/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=\u000aancestor::Statement/preceding-sibling::*[position()=1 and self::ForUpdate]/descendant::*/PrimaryPrefix/Name/@Image]\u000a/Name/@Image,"."))]\u000a]\u000a|\u000a//BlockStatement\u000a[ends-with(\u000aStatement/WhileStatement/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name/@Image,".hasNext"\u000a)]\u000a[starts-with(\u000aStatement/WhileStatement/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name/@Image,\u000apreceding-sibling/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Iterator"]]/VariableDeclarator/VariableDeclaratorId/@Image\u000a)]\u000a[ends-with(\u000aStatement/WhileStatement/Statement/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name/@Image,".next"\u000a)]','Old version''s usage is not recommended.','SuboptimalStatement','public class LegacyUsageForLoop {\u000a    public void correctIncludeVariableInStatement() {\u000a        List<String> strList = new ArrayList<String>();\u000a        for (int i=0; i<10; i++) {\u000a            strList.add(String.valueOf(i));\u000a        }\u000a    }\u000a    \u000a    public void wrongImplicitIncludeVariableInStatement() {\u000a        String[] strs = { "E", "F", "G", "H" };\u000a        int len = strs.length;\u000a        for (int i = 0; i < len; i++) {\u000a            assert (strs[i] != null);\u000a        }\u000a    }\u000a    \u000a    public void correctIterate() {\u000a        String[] strs = { "A", "B", "C", "D" };\u000a        for (String str : strs) {\u000a            assert (str != null);\u000a        }\u000a        List<String> strList = Arrays.asList(strs);\u000a        for (String str : strList) {\u000a            assert (str != null);\u000a        }\u000a\u000a        Set<String> strSet = new HashSet<String>(strList);\u000a        for (String str : strSet) {\u000a            assert (str != null);\u000a        }\u000a    }\u000a\u000a    public void wrongIterate() {\u000a        String[] strs = { "E", "F", "G", "H" };\u000a        for (int i = 0; i < strs.length; i++) {\u000a            assert (strs[i] != null);\u000a        }\u000a        List<String> strList = Arrays.asList(strs);\u000a        Iterator<String> it = strList.iterator();\u000a        while (it.hasNext()) {\u000a            assert (it.next() != null);\u000a        }\u000a\u000a        Set<String> strSet = new HashSet<String>(strList);\u000a        Iterator<String> itr = strSet.iterator();\u000a        while (itr.hasNext()) {\u000a            assert (itr.next() != null);\u000a        }\u000a    }\u000a}','inner-class',2,'','xpath','CombinativeFunctionJavaRule')
INSERT INTO PATTERN VALUES(8,'UnspecifyTargetTypeInArrayConversion','//CastExpression[Type/ReferenceType/ClassOrInterfaceType[@Image != "Object"]]//PrimaryExpression\u000a[\u000aPrimaryPrefix/Name[ends-with(@Image, ''.toArray'')]\u000aand\u000aPrimarySuffix/Arguments[count(*) = 0]\u000aand\u000acount(PrimarySuffix) = 1\u000a]','Target type is not specified.','UnsafeDataAccess','public class UnspecifyTargetTypeInArrayConversion {\u000a    List<String> strList = new ArrayList<String>();\u000a    {\u000a\u000a        strList.add("A");\u000a        strList.add("B");\u000a        strList.add("C");\u000a    }\u000a\u000a    public String[] correctArrayConversion() {\u000a\u000a        return strList.toArray(new String[0]);\u000a    }\u000a\u000a    public String[] wrongArrayConversion() {\u000a\u000a        return (String[]) strList.toArray();\u000a    }\u000a}','inner-class',2,'','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(9,'ExpensiveOperationsInSynchronizedBlock','//ClassOrInterfaceBodyDeclaration\u000a[\u000adescendant::*/BlockStatement/Statement/SynchronizedStatement\u000a[\u000adescendant::*/BlockStatement/descendant::*/PrimaryExpression/PrimarySuffix[preceding-sibling::*[position()=1 and self::PrimaryPrefix]/Name[##AUX_CON##]]/Arguments[@ArgumentCount>=0]\u000a]\u000a/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=\u000apreceding-sibling::*/FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]/TypeArguments]/VariableDeclarator/VariableDeclaratorId/@Image\u000a]\u000a/descendant::*/BlockStatement/Statement/SynchronizedStatement/descendant::*/BlockStatement/descendant::*/PrimaryExpression/PrimaryPrefix\u000a[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount>=0]]/Name[##AUX_CON##]','Expensive operation(s) is in synchronized block.','ExcessiveSynchronization','public class ExpensiveOperationsInSynchronizedBlock {\u000a    List<String> strList = new ArrayList<String>();\u000a    {\u000a\u000a        strList.add("A");\u000a        strList.add("B");\u000a        strList.add("C");\u000a    }\u000a    \u000a    public void excludeExpensiveOperation() {\u000a        synchronized (strList) {\u000a            strList.add("E");\u000a        }\u000a        excludecostMethod();\u000a    }\u000a    \u000a    public void includeExpensiveOperation() {\u000a        synchronized (strList) {\u000a            strList.add("F");\u000a            includecostMethod();\u000a        }\u000a    }\u000a    \u000a    public void excludecostMethod() {\u000a        \u000a    }\u000a    \u000a    public void includecostMethod() {\u000a        \u000a    }\u000a}','inner-class',1,'costMethod,excludecostMethod,includecostMethod,processItem','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(10,'SynchronizeCollectionWithLockVariable','//ClassOrInterfaceBodyDeclaration\u000a[\u000astarts-with(MethodDeclaration/descendant::*/BlockStatement\u000a[ends-with(preceding-sibling::*/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments]/Name/@Image,''.lock'')]\u000a/descendant::*/BlockStatement/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments]/Name/@Image,\u000aconcat(preceding-sibling::*/FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/descendant::*/VariableDeclaratorId/@Image,''.''))\u000a]\u000a/MethodDeclaration/MethodDeclarator','Lock cost is higher than object operation.','ExcessiveSynchronization',' /* \u000a * Correct:\u000a * Map<String, Data> m = Collections.synchronizedMap(new HashMap<String, Data>());\u000a */\u000apublic class SynchronizeCollectionWithLockVariable {\u000a    private final Map<String, Data> m = new HashMap<String, Data>();\u000a    private final ReadWriteLock rwl = new ReentrantReadWriteLock();\u000a    private final Lock r = rwl.readLock();\u000a    private final Lock w = rwl.writeLock();\u000a\u000a    public Data get(String key) {\u000a        r.lock();\u000a        try {\u000a            return m.get(key);\u000a        } finally {\u000a            r.unlock();\u000a        }\u000a    }\u000a\u000a    public String[] allKeys() {\u000a        r.lock();\u000a        try {\u000a            return m.keySet().toArray(new String[0]);\u000a        } finally {\u000a            r.unlock();\u000a        }\u000a    }\u000a\u000a    public Data put(String key, Data value) {\u000a        w.lock();\u000a        try {\u000a            return m.put(key, value);\u000a        } finally {\u000a            w.unlock();\u000a        }\u000a    }\u000a\u000a    public void clear() {\u000a        w.lock();\u000a        try {\u000a            m.clear();\u000a        } finally {\u000a            w.unlock();\u000a        }\u000a    }\u000a\u000a    class Data {\u000a        String name;\u000a\u000a        /**\u000a         * @return the name\u000a         */\u000a        public String getName() {\u000a            return name;\u000a        }\u000a\u000a        /**\u000a         * @param name\u000a         *            the name to set\u000a         */\u000a        public void setName(String name) {\u000a            this.name = name;\u000a        }\u000a\u000a    }\u000a}','inner-class',1,'','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(11,'UseSynchronizedSet','//BlockStatement/descendant::*/PrimaryExpression/PrimaryPrefix\u000a[starts-with(Name/@Image,''Collections.'')]\u000a[ends-with(Name/@Image,''.synchronizedSet'')]\u000a[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount="1"]/ArgumentList/descendant::*/\u000aAllocationExpression[ClassOrInterfaceType[@Image="HashSet"]]/Arguments[@ArgumentCount="0"]]','Exclusive set is not recommended.','ExcessiveSynchronization','public class UseSynchronizedSet {\u000a\u000a    public Set<String> correctGetSafeSet() {\u000a        return Collections\u000a            .newSetFromMap(new ConcurrentHashMap<String, Boolean>());\u000a    }\u000a\u000a    public Set<String> wrongGetSafeSet() {\u000a        return Collections.synchronizedSet(new HashSet<String>());\u000a    }\u000a}','inner-class',1,'','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(12,'CallCombinativeFunctionTwiceOrMoreInLoop','//Statement[ForStatement]\u000a[\u000adescendant::*/Statement[descendant::*/BlockStatement/descendant::*/PrimaryExpression/PrimarySuffix\u000a[preceding-sibling::*[position()=1 and self::PrimaryPrefix]/Name[##AUX_CON##]]\u000a/Arguments[@ArgumentCount="1"]/ArgumentList/descendant::*/PrimaryPrefix/Name/@Image=\u000aancestor::*/ForStatement/LocalVariableDeclaration/VariableDeclarator/VariableDeclaratorId/@Image]\u000a]','Combinative functions in loop are not combined.','SuboptimalStatement','public class CallCombinativeFunctionTwiceOrMoreInLoop {\u000a\u0009public void methodA() {\u000a\u0009\u0009String[] keys = { "A", "B", "C", "D" };\u000a\u0009\u0009for (String key: keys) {\u000a\u0009\u0009\u0009CallCombinativeFunctionTwiceOrMoreInLoop callCombinativeFunctionTwiceOrMoreInLoop = DBManager.getRowByID(key);\u000a\u0009\u0009\u0009processRow(callCombinativeFunctionTwiceOrMoreInLoop);\u000a\u0009\u0009}\u000a\u0009}\u000a\u000a\u0009private void processRow(\u000a\u0009\u0009\u0009CallCombinativeFunctionTwiceOrMoreInLoop callCombinativeFunctionTwiceOrMoreInLoop) {\u000a\u0009\u0009// TODO Auto-generated method stub\u000a\u0009\u0009\u000a\u0009}\u000a}','inner-class',1,'cominativeMethod,serviceA.call,processRow,Configuration.getInstance,ServiceSessionManager.getInstance,ServiceManagerFactory.getServiceManager,SPIContextManager.getSPIContext','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(13,'ComputationalComplexityProblem','//BlockStatement\u000a[count(\u000aStatement[ForStatement or WhileStatement or DoStatement]\u000a/descendant::*/Statement[ForStatement or WhileStatement or DoStatement]\u000a)>0]','Computation Complexity is O(square of N) or higher.','SuboptimalStatement','public class ComputationalComplexityProblem {\u000a    public void squareOfNComputation() {\u000a        int[] nums = { 3, 1, 2 };\u000a        int sum = 0;\u000a        for (int i : nums)\u000a            for (int j : nums) {\u000a                sum += i * j;\u000a            }\u000a    }\u000a}','inner-class',1,'','xpath','CallExpensiveFunctionJavaRule')
INSERT INTO PATTERN VALUES(14,'CallCombinativeFunctionTwiceOrMore','CallCombinativeFunctionTwiceOrMore','Combinative functions are not combined.','SuboptimalStatement','public class CallCombinativeFunctionTwiceOrMore {\u000a    public void correctCallMethods() {\u000a        cominativeMethod(new String[] { "A", "B" });\u000a    }\u000a\u000a    public void wrongCallMethods() {\u000a        cominativeMethod("A");\u000a        cominativeMethod("B");\u000a    }\u000a\u000a    void cominativeMethod(String s) {\u000a\u000a    }\u000a\u000a    void cominativeMethod(String[] s) {\u000a\u000a    }\u000a    \u000a    public void correctCallMethods2() {\u000a        cominativeMethod(new String[][] { {"A", "B"},{"C","D"}});\u000a    }\u000a    \u000a    void cominativeMethod(String[][] s) {\u000a\u000a    }\u000a    \u000a    public void wrongCallMethods2() {\u000a        cominativeMethod2("A","B");\u000a        cominativeMethod2("C","D");\u000a    }\u000a\u000a    void cominativeMethod2(String s1,String s2) {\u000a\u000a    }\u000a    void cominativeMethod2(String[] s1,String[] s2) {\u000a\u000a    }\u000a}','inner-class',1,'cominativeMethod,cominativeMethod2','java','CombinativeFunctionJavaRule')
