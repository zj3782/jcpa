<?xml version="1.0"?> <ruleset name="jcpa pmd rules" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd" xsi:noNamespaceSchemaLocation="http://pmd.sourceforge.net/ruleset_2_0_0.xsd"><description>jcpa pmd ruleset</description><rule name="ExcessiveDetectionWithLengthOrSize" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=1"><description>It's unnecessary to judge variable's length or size before it was used in For Statement.</description><priority>3</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
  [
  	descendant::*/IfStatement/descendant::*[RelationalExpression]/descendant::*/Literal[@Image="0"]
  ]
  [
  	ends-with(descendant::*/IfStatement/descendant::*/Name/@Image,'.length')
  ]
  [
  	starts-with(
  	descendant::*/IfStatement/descendant::*/Name/@Image,
  	concat(
  	preceding-sibling::*
  	[./LocalVariableDeclaration/Type/ReferenceType[@Array="true"]]
  	[count(./LocalVariableDeclaration/*/*/ArrayInitializer/*)=0]
  	/LocalVariableDeclaration/*/VariableDeclaratorId/@Image, ".")
  	)
  ]
  [
  	not(preceding-sibling::*[descendant::*/AssignmentOperator]) or
  	not(starts-with(
  	descendant::*/RelationalExpression/descendant::*/Name/@Image,
  	preceding-sibling::*[descendant::*/AssignmentOperator]
  	/descendant::*/PrimaryPrefix/Name/@Image))
  ]
  |
  //BlockStatement
  [
  	descendant::*/IfStatement/descendant::*[RelationalExpression]/descendant::*/Literal[@Image="0"]
  ]
  [
  	ends-with(descendant::*/IfStatement/descendant::*/Name/@Image,'.length')
  ]
  [
  	starts-with(
  	descendant::*/IfStatement/descendant::*/Name/@Image,
  	concat(descendant::*/IfStatement/descendant::*/ForStatement/descendant::*/Name/@Image, ".")
  	)
  ]
 |
 //BlockStatement
 [
 ends-with(
 descendant::*/IfStatement/Expression//RelationalExpression[@Image=">"][PrimaryExpression/PrimaryPrefix/Literal[@Image="0"]]
 /PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="0"]]/PrimaryPrefix/Name/@Image,'.size'
 )
 ]
 [
 starts-with(
 descendant::*/IfStatement/Expression//RelationalExpression[@Image=">"][PrimaryExpression/PrimaryPrefix/Literal[@Image="0"]]
 /PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="0"]]/PrimaryPrefix/Name/@Image,
 concat(
 descendant::*/IfStatement/descendant::*/ForStatement/descendant::*/Name/@Image, ".")
 )
 ]]]></value></property></properties><example><![CDATA[(1)public class ClassA{
  	void methodA() {
  		ClassA[] array = {};
  		if (array.length > 0) {
  			for (ClassA obj: array) {
  				//doSometing
  			}
  		}
  	}
  }
 
 
 （2）public class ClassA{
   void methodA() {
 if (isNeedDeleteRememberMeCookie &amp;&amp; newCookies.size() > 0) {
 			for (Cookie cookie : newCookies) {
 				response.addCookie(cookie);
 			}
 		}
  }
 }]]></example></rule><rule name="ExcessiveIfStatementWithNull" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=2"><description>It's unnecessary to judge whether the variable was set null value after it was allocated.</description><priority>3</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
  [
  	descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Literal/NullLiteral
  ]
  [
  	descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/PrimaryPrefix/Name/@Image=
                      preceding-sibling::*[descendant::*/AllocationExpression]/descendant::*/VariableDeclaratorId/@Image 
  ]
  [
  	not(preceding-sibling::*[descendant::*/AssignmentOperator]) or
  	not(
  	descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Name/@Image=
  	preceding-sibling::*[descendant::*/AssignmentOperator]
  	/descendant::*/PrimaryPrefix/Name/@Image)
  ]]]></value></property></properties><example><![CDATA[public class ClassA{
     void methodA() {
       ClassA inst= new ClassA();
       if (inst == null) {
       //doSomething
       }
     }
   }]]></example></rule><rule name="ExplicitlyReclaimLocalVariable" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=3"><description>It's unnecessary to set the local variable null value to reclaim the memory.</description><priority>4</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
 [Statement/StatementExpression/AssignmentOperator/following-sibling::*[self::Expression and position()=1]/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]
 [not(following-sibling::*/descendant::*/PrimaryPrefix/Name/@Image=descendant::*/PrimaryPrefix/Name/@Image)]]]></value></property></properties><example><![CDATA[public class ClassA{
  	void methodA() {
  		ClassA inst = new ClassA();
  		// method body
  		inst = null;
  	}
  }]]></example></rule><rule name="RepetiveMethodInvocationAsArgument" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=4"><description>Repetive method invocations are arguments of other methods.</description><priority>2</priority><properties><property name="xpath"><value><![CDATA[//PrimaryExpression
 [PrimarySuffix/Arguments[@ArgumentCount=0]]
 [ancestor::*/ArgumentList]
 [
 	ancestor::*[self::BlockStatement]
 	/preceding-sibling::*/descendant::*/
 	PrimarySuffix/Arguments[@ArgumentCount=0]
 	[ancestor::*/ArgumentList]
 	/../../PrimaryPrefix/Name/@Image = ./PrimaryPrefix/Name/@Image
 ]]]></value></property></properties><example><![CDATA[public class ClassA{
  	void methodA() {
  		ClassA inst = new ClassA();
  		one(inst.sum());
  		two(inst.sum());
  		three(inst.sum());
  	}
  }]]></example></rule><rule name="RepetiveMethodInvocationInDifferentMethod" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=5"><description>Repetive method invocations are used in different method.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//PrimaryExpression
[PrimarySuffix/Arguments[@ArgumentCount=0]]
[ancestor::*/VariableInitializer]
[
	ancestor::*[self::ClassOrInterfaceBodyDeclaration]/preceding-sibling::*/descendant::*/PrimaryExpression
	[PrimarySuffix/Arguments[@ArgumentCount=0]]
	[
		PrimaryPrefix/Name/@Image=./PrimaryPrefix/Name/@Image
		and PrimarySuffix/@Image=./PrimarySuffix/@Image
		and PrimarySuffix/Arguments[@ArgumentCount=1]/ArgumentList/descendant::*/PrimaryPrefix/Literal/@Image=
		./PrimarySuffix/Arguments[@ArgumentCount=1]/ArgumentList/descendant::*/PrimaryPrefix/Literal/@Image
	]
]]]></value></property></properties><example><![CDATA[public class ClassA{
  	void methodA() {
     		HandlerFactory hf = HandlerFactory.getInstance().getHandler("A");
  	}
  	void methodB() {
  		HandlerFactory hf = HandlerFactory.getInstance().getHandler("A");
  	}
  }]]></example></rule><rule name="RepetiveBitOperation" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=6"><description>Repetive bit operation can be merged.</description><priority>3</priority><properties><property name="xpath"><value><![CDATA[//Expression
  [
  	ConditionalAndExpression
  	[
  		count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1
  	]
  	or
   	ConditionalOrExpression
  	[
  		count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1
  	]
  ]]]></value></property></properties><example><![CDATA[public class ClassA{
  	void methodA() {
  		if (!A && !B && !C && !D) {
  			//doSomething
  		}
  	}
  }]]></example></rule><rule name="BrokenThreadStateWithMutiThreads" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=7"><description>It'll be broken when there are multiple threads.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//ClassOrInterfaceBodyDeclaration
[FieldDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]]
[
following-sibling::*
[MethodDeclaration]
[count(descendant::*[@Synchronized="true"])=0]
[count(descendant::*/SynchronizedStatement)=0]
/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")
]
|
//ClassOrInterfaceBodyDeclaration
[FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]
/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId
]
[
following-sibling::*
[self::ClassOrInterfaceBodyDeclaration]
[descendant::*/PrimaryExpression/PrimarySuffix[@Image="putAll"]]
/descendant::*/PrimaryExpression[PrimarySuffix[@Image="putAll"]]/PrimarySuffix/@Image
=
FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]
/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image
]
|
//ClassOrInterfaceBodyDeclaration
[FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]
/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId
]
[
starts-with(
following-sibling::*
[self::ClassOrInterfaceBodyDeclaration]
[descendant::*/PrimaryExpression/PrimaryPrefix/Name[ends-with(@Image,".putAll")]]
/descendant::*/PrimaryExpression/PrimaryPrefix/Name[ends-with(@Image,".putAll")]/@Image
,
FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]
/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image
)
]]]></value></property></properties><example><![CDATA[public class KeyHolder{
  	private Set<key> keys= new HashSet<key>();
          private static int size = 500;
          public void put(String key) {
               int less = keys.size() - size;
               for (Key key: keys) {
                    if (less-- <= 0) break;
                    keys.remove(key);
                    
               }
               keys.add(key);
          }
  }]]></example></rule><rule name="LegacyUsageBecomeNewForStatement" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=8"><description>Legacy usage can be replaced with new ForStatement.</description><priority>2</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
  [
  	ends-with(descendant::*/ForStatement/descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="1"]]/PrimaryPrefix/Name/@Image,'.get')
  ]
  [
  	starts-with(
  	descendant::*/ForStatement/descendant::*/BlockStatement/descendant::*/PrimaryPrefix/Name/@Image,
  	concat(preceding-sibling::*/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image='List' or @Image='Set']]/VariableDeclarator/VariableDeclaratorId/@Image, ".")
  	)
  ]
 |
 //BlockStatement
 [ends-with(
 descendant::*/WhileStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount=0]]/PrimaryPrefix/Name/@Image,'.hasNext'
 )]
 [starts-with(
 descendant::*/WhileStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount=0]]/PrimaryPrefix/Name/@Image,
 concat(preceding-sibling::*/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Iterator"]]/VariableDeclarator[VariableInitializer/descendant::*/PrimarySuffix[@Image="iterator"]]/VariableDeclaratorId/@Image,".")
 )]]]></value></property></properties><example><![CDATA[(1)public class ClassA{
  	void methodA() {
  		List queue = new ArrayList();
  		int size = queue.size();
  		for (int i=0; i< size; i++) {
  			ClassA inst = (ClassA) queue.get(i);
  		}
  	}
  }
 
 
 (2)class A{
 public JSONObject toJSON() throws JSONException {
 Iterator<string> candidatesIterator = this.getCandidates().keySet().iterator();
     	JSONObject jsonCandidates = new JSONObject();
     	while(candidatesIterator.hasNext()){
     		String key = candidatesIterator.next();
     		jsonCandidates.put(key, this.getCandidates().get(key).toJSON());
     	}
    }
 }]]></example></rule><rule name="NoTargetTypeInArrayConversion" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=9"><description>Array conversion does not specify target type.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//CastExpression[Type/ReferenceType/ClassOrInterfaceType[@Image != "Object"]]//PrimaryExpression
  [
   PrimaryPrefix/Name[ends-with(@Image, '.toArray')]
   and
   PrimarySuffix/Arguments[count(*) = 0]
  and
  count(PrimarySuffix) = 1
  ]]]></value></property></properties><example><![CDATA[public class ClassA{
  	public void doSomething() {
  		Integer[] a = (Integer [])c.toArray();
  	}
  }]]></example></rule><rule name="ExcessivedActionInSynchronizedBlock" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=10"><description>Some actions are excessived in synchronized block.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//ClassOrInterfaceBodyDeclaration
  [
  	descendant::*/BlockStatement/descendant::*/SynchronizedStatement
  	[descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name[@Image="processItem"]]/PrimarySuffix/Arguments[@ArgumentCount>0]]
  	/descendant::*/PrimaryPrefix/Name/@Image=
  	preceding-sibling::*/FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/VariableDeclarator/VariableDeclaratorId/@Image
  ]]]></value></property></properties><example><![CDATA[public class ClassA{
  	private Map<key,value> mapper = new HashMap<key, value="">();
  	public void put(Key k, Value v) {
  		synchronized(mapper) {
  			mapper.put(k,v);
  			processItem(k, v);
                  }
          }
  }]]></example></rule><rule name="ExcessivedRWLock" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=11"><description>It's excessived to use ReentrantReadWriteLock for simple action. Use synchronized instead.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//ClassOrInterfaceBodyDeclaration
  [
  starts-with(MethodDeclaration/descendant::*/BlockStatement
  [ends-with(preceding-sibling::*/descendant::*/PrimaryExpression[PrimarySuffix/Arguments]/PrimaryPrefix/Name/@Image,'.lock')]
  /descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments]/PrimaryPrefix/Name/@Image,
  concat(preceding-sibling::*/FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/descendant::*/VariableDeclaratorId/@Image,'.'))
  ]]]></value></property></properties><example><![CDATA[class RWDictionary {
      private final Map<string, data=""> m = new HashMap<string, data="">();
      private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
      private final Lock r = rwl.readLock();
      private final Lock w = rwl.writeLock();
  
      public Data get(String key) {
          r.lock();
          try { return m.get(key); }
          finally { r.unlock(); }
      }
      public String[] allKeys() {
          r.lock();
          try { return m.keySet().toArray(); }
          finally { r.unlock(); }
      }
      public Data put(String key, Data value) {
          w.lock();
          try { return m.put(key, value); }
          finally { w.unlock(); }
      }
      public void clear() {
          w.lock();
          try { m.clear(); }
          finally { w.unlock(); }
      }
   }]]></example></rule><rule name="SynchronizedSetIsExcessive" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=12"><description>SynchronizedSet is excessive, you can use ConcurrentHashMap instead.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement/descendant::*/PrimaryExpression
  [starts-with(PrimaryPrefix/Name/@Image,'Collections.')]
  [ends-with(PrimaryPrefix/Name/@Image,'.synchronizedSet')]
  /PrimarySuffix/Arguments[@ArgumentCount="1"]/ArgumentList/descendant::*/
  AllocationExpression[ClassOrInterfaceType[@Image="HashSet"]]/Arguments[@ArgumentCount="0"]]]></value></property></properties><example><![CDATA[public class ClassA{
  	void methodA() {
  		Set safeSet= Collections.synchronizedSet(new HashSet());
                 Set safeSet2=Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
  	}
  }]]></example></rule><rule name="LongRoundTripsInDifferentMethod" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=13"><description>There are long round trips in different method.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration
  [
  count(
  descendant::*/BlockStatement/descendant::*/PrimaryExpression[starts-with(PrimaryPrefix/Name/@Image,'serviceA.')]
  /PrimarySuffix/Arguments[@ArgumentCount="1"]
  )>1
  ]
  [
  descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="0"]]/PrimaryPrefix/Name/@Image=
  following-sibling::*/MethodDeclaration[descendant::*/BlockStatement/descendant::*/PrimaryExpression[starts-with(PrimaryPrefix/Name/@Image,'serviceA.')]
  /PrimarySuffix/Arguments[@ArgumentCount="1"]]/MethodDeclarator/@Image
  ]
  |
  //ClassOrInterfaceBody
  [count(//ClassOrInterfaceBodyDeclaration
  [count(descendant::*/BlockStatement/descendant::*/PrimaryExpression[starts-with(PrimaryPrefix/Name/@Image,'serviceA.')]
  /PrimarySuffix/Arguments[@ArgumentCount="1"])>=1
  ] )>1
  ]/ClassOrInterfaceBodyDeclaration
  [
  descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount="0"]]/PrimaryPrefix/Name/@Image=
  following-sibling::*/MethodDeclaration[descendant::*/BlockStatement/descendant::*/PrimaryExpression[starts-with(PrimaryPrefix/Name/@Image,'serviceA.')]
  /PrimarySuffix/Arguments[@ArgumentCount="1"]]/MethodDeclarator/@Image
  ]]]></value></property></properties><example><![CDATA[public class ClassA{
  	public void methodA() {
  		serviceA.call(url1);
  		serviceA.call(url2);
  		methodB();
  	}
  	public void methodB() {
  		serviceA.call(url3);
  		serviceA.call(url4);
  	}
  }]]></example></rule><rule name="FrequentIOsUseForStatement" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=14"><description>To access database frequently for reading and writing data.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//Statement[ForStatement]
[
descendant::*/Statement[descendant::*/BlockStatement/descendant::*/PrimaryExpression
[starts-with(PrimaryPrefix/Name/@Image,'DBManager.')]
/PrimarySuffix/Arguments[@ArgumentCount="1"]/ArgumentList/descendant::*/PrimaryPrefix/Name/@Image=
ancestor::*/ForStatement/LocalVariableDeclaration/VariableDeclarator/VariableDeclaratorId/@Image]
]]]></value></property></properties><example><![CDATA[public class ClassA{
  	public void methodA() {
  		for (String key: keys) {
  			ClassA curRow = DBManager.getRowByID(key);
  			processRow(curRow);
  		}
  	}
  }]]></example></rule><rule name="InfiniteLoop" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=15"><description>The time complexity of the infinite loop is too high.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
  [count(Statement[ForStatement or WhileStatement or DoStatement]/descendant::*/BlockStatement/Statement[ForStatement or WhileStatement or DoStatement])>0]]]></value></property></properties><example><![CDATA[public class ClassA{
  	public void doSomething() {
  		int size = 100;
  		for (int i=0; i< size; i++) {
  			for (int j=0; j< size; j++){
  				//doSomething
  			}
  		}
  	}
  }]]></example></rule><rule name="RepetiveMethodInvocationAsStatement" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=16"><description>Repetive method invocations are just statements or Assignment statements.</description><priority>2</priority><properties><property name="xpath"><value><![CDATA[//PrimaryExpression
 [PrimarySuffix/Arguments[@ArgumentCount=0]]
 [
 	ancestor::*[self::Statement]/preceding-sibling::*/descendant::*/PrimaryExpression
 	[PrimarySuffix/Arguments[@ArgumentCount=0]]/PrimaryPrefix/Name/@Image
 	=./PrimaryPrefix/Name/@Image
 ]]]></value></property></properties><example><![CDATA[public class ClassA{
 	public void put() {
 		if(IdentityConstants.TRAIN_CONTEXT_TYPE.equalsIgnoreCase(assistantContext.getContextType())) {
 			 ServiceSessionManager.getInstance().deleteServiceSession(AuthenticationContext.NAME);
 		 } else {
 			 ServiceSessionManager.getInstance().setServiceSession(assistantContext);
 			 SPIContextManager.getSPIContext().registerServiceSessionParam(AssistantContext.NAME, assistantContext.getAttributes().get(IdentityConstants.TOKEN));
 		 }	
         }
 }]]></example></rule><rule name="NeverUsedMethod" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=17"><description>The method is never used.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//ClassOrInterfaceBodyDeclaration
[not(following-sibling::*/descendant::*/Name/@Image=MethodDeclaration/MethodDeclarator/@Image)]
[not(preceding-sibling::*/descendant::*/Name/@Image=MethodDeclaration/MethodDeclarator/@Image)]
/MethodDeclaration[@Private="true"]/MethodDeclarator]]></value></property></properties><example><![CDATA[NeverUsedMethod]]></example></rule></ruleset>