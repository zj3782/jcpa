<?xml version="1.0"?> <ruleset name="jcpa pmd rules" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd" xsi:noNamespaceSchemaLocation="http://pmd.sourceforge.net/ruleset_2_0_0.xsd"><description>jcpa pmd rules -- generate by admin at the time of 2012.11.17 14:56:03</description><rule name="ProbeSizeOfArrayOrCollectionBeforeForStatement" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=1"><description>You'd better not probe the size of array or collection before For statement.</description><priority>3</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
[
descendant::*/IfStatement/descendant::*[RelationalExpression]/descendant::*/Literal[@Image="0"]
]
[
ends-with(descendant::*/IfStatement/descendant::*/Name/@Image,'.length')
]
[starts-with(
descendant::*/IfStatement/descendant::*/Name/@Image,
concat(preceding-sibling::*
[./LocalVariableDeclaration/Type/ReferenceType[@Array="true"]]
[count(./LocalVariableDeclaration/*/*/ArrayInitializer/*)=0]
/LocalVariableDeclaration/*/VariableDeclaratorId/@Image, ".")
)]
[
not(preceding-sibling::*[descendant::*/AssignmentOperator]) or
not(starts-with(
descendant::*/RelationalExpression/descendant::*/Name/@Image,
preceding-sibling::*[descendant::*/AssignmentOperator]/descendant::*/PrimaryPrefix/Name/@Image))
]
|
//BlockStatement
[
descendant::*/IfStatement/descendant::*[RelationalExpression]/descendant::*/Literal[@Image="0"]
]
[
ends-with(descendant::*/IfStatement/descendant::*/Name/@Image,'.length')
]
[starts-with(
descendant::*/IfStatement/descendant::*/Name/@Image,
concat(descendant::*/IfStatement/descendant::*/ForStatement/descendant::*/Name/@Image, ".")
)]
|
//BlockStatement
[
ends-with(
descendant::*/IfStatement/Expression//RelationalExpression[@Image=">"][PrimaryExpression/PrimaryPrefix/Literal[@Image="0"]]
/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount="0"]]/Name/@Image,'.size'
)]
[starts-with(
descendant::*/IfStatement/Expression//RelationalExpression[@Image=">"][PrimaryExpression/PrimaryPrefix/Literal[@Image="0"]]
/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount="0"]]/Name/@Image,
concat(
descendant::*/IfStatement/descendant::*/ForStatement/descendant::*/Name/@Image, ".")
)]]]></value></property></properties><example><![CDATA[public class ProbeSizeOfArrayOrCollectionBeforeForStatement {
     String[] sampleArr = { "A", "B", "C", "D", "E" };
     Collection<String> sampleCollection = Arrays.asList(sampleArr);
 
     public void correctIterateArray() {
         if (sampleArr != null) {
             for (String element : sampleArr) {
                 assert (element != null);
             }
         }
         if (sampleCollection != null) {
             for (String element : sampleCollection) {
                 assert (element != null);
             }
         }
 
     }
 
     public void wrongIterateArray() {
         if (sampleArr.length > 0) {
             for (String element : sampleArr) {
                 assert (element != null);
             }
         }
         if (sampleCollection.size() > 0) {
             for (String element : sampleCollection) {
                 assert (element != null);
             }
         }
     }
}]]></example></rule><rule name="UnnecessaryLogicalJudgement" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=2"><description>There's unnecessary logical judgement here.</description><priority>3</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
[
Statement/IfStatement/descendant::*[EqualityExpression]/descendant::*/Literal/NullLiteral
]
[
descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/PrimaryPrefix/Name/@Image=
preceding-sibling::*[descendant::*/AllocationExpression]/descendant::*/VariableDeclaratorId/@Image 
]
[
not(preceding-sibling::*[descendant::*/AssignmentOperator]) or
not(descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Name/@Image=
preceding-sibling::*[descendant::*/AssignmentOperator]/descendant::*/PrimaryPrefix/Name/@Image)
]
|
//BlockStatement
[
Statement/IfStatement/descendant::*/EqualityExpression[@Image="=="]
[descendant::*/Literal/NullLiteral]/PrimaryExpression/PrimaryPrefix/Name/@Image=
preceding-sibling::*/LocalVariableDeclaration/VariableDeclarator[descendant::*/Literal/NullLiteral]/VariableDeclaratorId/@Image
]
[
not(preceding-sibling::*[descendant::*/AssignmentOperator]) or
not(descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Name/@Image=
preceding-sibling::*[descendant::*/AssignmentOperator]/descendant::*/PrimaryPrefix/Name/@Image)
]
|
//BlockStatement
[
Statement/IfStatement/Expression/EqualityExpression[@Image="!="][PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]/PrimaryExpression/PrimaryPrefix/Name/@Image=
preceding-sibling::*/LocalVariableDeclaration/VariableDeclarator[not(descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments]/Name)]
[
not(descendant::*/Literal/NullLiteral)]/VariableDeclaratorId/@Image
]
[
not(preceding-sibling::*[descendant::*/AssignmentOperator]) or
not(descendant::*/IfStatement/descendant::*[EqualityExpression]/descendant::*/Name/@Image=
preceding-sibling::*[descendant::*/AssignmentOperator]/descendant::*/PrimaryPrefix/Name/@Image)
]]]></value></property></properties><example><![CDATA[public class UnnecessaryLogicalJudgement {
     public String correctTestVariable() {
         String signal = null;
         Scanner in = new Scanner(System.in);
         String what = in.nextLine();
         if (what == "Yes" || what == "No") {
             signal = what;
         }
         return signal;
     }
 
     public String wrongTestVariable1() {
         String signal = null;
         Scanner in = new Scanner(System.in);
         String what = in.nextLine();
         if (signal == null) {
             if (what == "Yes" || what == "No") {
                 signal = what;
             }
         }
         return signal;
     }
 
     public String wrongTestVariable2() {
         String signal = "Yes";
         Scanner in = new Scanner(System.in);
         String what = in.nextLine();
         if (signal != null) {
             if (what == "Yes" || what == "No") {
                 signal = what;
             }
         }
         return signal;
     }
}]]></example></rule><rule name="ReclaimMemorySpace" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=3"><description>It's unnecessary to reclaim memory space here.</description><priority>3</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
[Statement/StatementExpression/AssignmentOperator/following-sibling::*[self::Expression and position()=1]/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]
[not(ancestor::*/following-sibling::*/descendant::*/PrimaryPrefix/Name/@Image=descendant::*/PrimaryPrefix/Name/@Image)]
[not(following-sibling::*/descendant::*/PrimaryPrefix/Name/@Image=descendant::*/PrimaryPrefix/Name/@Image)]]]></value></property></properties><example><![CDATA[public class ReclaimMemorySpace {
     public String correctSetNull() {
         String question = "?";
         Scanner in = new Scanner(System.in);
         String what = in.nextLine();
         if (!(what == "Yes" || what == "No")) {
             question = null;
         } else {
             question = what + question;
         }
         return question;
     }
 
     public String wrongSetNull() {
         String question = "?";
         Scanner ini = new Scanner(System.in);
         String whati = ini.nextLine() + question;
         question = null;
         return whati;
     }
}]]></example></rule><rule name="CallSameFunctionTwiceOrMoreInMethod" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=4"><description>You'd better not call the same function twice or more times in a method.</description><priority>2</priority><properties><property name="xpath"><value><![CDATA[//PrimaryExpression
[PrimarySuffix/Arguments[@ArgumentCount=0]]
[ancestor::*/ArgumentList]
[
    ancestor::*[self::BlockStatement]
    /preceding-sibling::*/descendant::*/
    PrimarySuffix/Arguments[@ArgumentCount=0]
    [ancestor::*/ArgumentList]
    /../../PrimaryPrefix/Name/@Image = ./PrimaryPrefix/Name/@Image
]]]></value></property></properties><example><![CDATA[public class CallSameFunctionTwiceOrMoreInMethod {
     private long f(long n) {
         if (n == 1) {
             return 1;
         } else {
             return n * f(n - 1);
         }
     }
 
     public long correctCallFunctions() {
         long part1 = f(4);
         long part2 = f(5);
         return part1 + part2;
     }
 
     public long wrongCallFunctions() {
         long part1 = f(6);
         long part2 = f(6);
         return part1 + part2;
     }
}]]></example></rule><rule name="CallSameFunctionTwiceOrMoreInClass" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=5"><description>You'd better not call the same function twice or more times in a class.</description><priority>4</priority><properties><property name="xpath"><value><![CDATA[//MethodDeclaration/Block/BlockStatement
/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name
[
@Image=
preceding::*
/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name/@Image
]
[not(ends-with(@Image,".nextLine") or ends-with(@Image,".next") or ends-with(@Image,".hasNext") or ends-with(@Image,".size") or ends-with(@Image,".toString") or ends-with(@Image,".lock") or ends-with(@Image,".unlock"))]]]></value></property></properties><example><![CDATA[public class CallSameFunctionTwiceOrMoreInClass {
 
     MethodFactory mf = MethodFactory.getInstance();
 
     String correctGetRed() {
         return mf.getColor(true);
     }
 
     String correctGetGray() {
         return mf.getColor(false);
     }
     
     String wrongGetRed() {
         return MethodFactory.getInstance().getColor(true);
     }
 
     String WrongGetGray() {
         return MethodFactory.getInstance().getColor(false);
     }
 
 
}]]></example></rule><rule name="SuboptimalLogicalExpression" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=6"><description>There're some suboptimal logical expressions.</description><priority>3</priority><properties><property name="xpath"><value><![CDATA[//Expression
[
    ConditionalAndExpression
    [
        count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1
    ]
    or AndExpression
    [
        count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1
    ]
        or ConditionalOrExpression
    [
        count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1
    ]
    or InclusiveOrExpression
    [
        count(descendant::UnaryExpressionNotPlusMinus[@Image="!"])>1
    ]
]]]></value></property></properties><example><![CDATA[public class SuboptimalLogicalExpression {
     public boolean correctExpression() {
         boolean l = true;
         boolean r = false;
         boolean m = true;
         return (!(l | r | m));
     }
 
     public boolean wrongExpression() {
         boolean l = true;
         boolean r = false;
         boolean m = true;
         return (!l & !r & !m);
     }
}]]></example></rule><rule name="OperateUnsynchronizedCollection" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=7"><description>There's no synchronized collection for doing some operations. </description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//ClassOrInterfaceBodyDeclaration
[
FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]
/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId
]
[
following-sibling::*
[self::ClassOrInterfaceBodyDeclaration]
[descendant::*/PrimaryExpression/PrimarySuffix[@Image="putAll"]]
/descendant::*/PrimaryExpression[PrimarySuffix[@Image="putAll"]]/PrimarySuffix/@Image
=
FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]
/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image
]
|
//ClassOrInterfaceBodyDeclaration
[
FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]
/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId
]
[starts-with(
following-sibling::*[self::ClassOrInterfaceBodyDeclaration]
[descendant::*/PrimaryExpression/PrimaryPrefix/Name[ends-with(@Image,".putAll")]]
/descendant::*/PrimaryExpression/PrimaryPrefix/Name[ends-with(@Image,".putAll")]/@Image
,
FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map"]]
/VariableDeclarator[descendant::*/AllocationExpression/ClassOrInterfaceType[@Image="HashMap"]]/VariableDeclaratorId/@Image
)]
|
//ClassOrInterfaceBodyDeclaration
[not(
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]
/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image
=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression
[Expression/PrimaryExpression/PrimarySuffix/Arguments[@ArgumentCount=1]/
descendant::*/ClassOrInterfaceType[@Image="ConcurrentHashMap"]/TypeArguments
]/PrimaryExpression/PrimaryPrefix/Name/@Image)
]
[
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]
/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image
=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression
[Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType]
/PrimaryExpression/PrimaryPrefix/Name/@Image
]
[
following-sibling::*[MethodDeclaration]
[count(descendant::*[@Synchronized="true"])=0]
[count(descendant::*/SynchronizedStatement)=0]
/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")
]
|
//ClassOrInterfaceBodyDeclaration
[not(
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="List"]
/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image
=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression
[Expression/PrimaryExpression/PrimaryPrefix
[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=1]]
/Name[@Image="Collections.synchronizedList"]]
/PrimaryExpression/PrimaryPrefix/Name/@Image)
]
[
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="List"]
/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image
=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression
[Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType]
/PrimaryExpression/PrimaryPrefix/Name/@Image
]
[
following-sibling::*[MethodDeclaration]
[count(descendant::*[@Synchronized="true"])=0]
[count(descendant::*/SynchronizedStatement)=0]
/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")
]
|
//ClassOrInterfaceBodyDeclaration
[not(
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map"]
/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image
=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression
[Expression/PrimaryExpression/PrimaryPrefix
[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=1]]
/Name[@Image="Collections.synchronizedMap"]]
/PrimaryExpression/PrimaryPrefix/Name/@Image)
]
[
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map"]
/descendant::*/TypeArgument]/VariableDeclarator/VariableDeclaratorId/@Image
=following-sibling::*[ConstructorDeclaration]/descendant::*/StatementExpression
[Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType]
/PrimaryExpression/PrimaryPrefix/Name/@Image
]
[
following-sibling::*[MethodDeclaration]
[count(descendant::*[@Synchronized="true"])=0]
[count(descendant::*/SynchronizedStatement)=0]
/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".put")
]
|
//ClassOrInterfaceBodyDeclaration
[not(
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]
/descendant::*/TypeArgument]/VariableDeclarator/VariableInitializer/
Expression/PrimaryExpression/PrimarySuffix/Arguments[@ArgumentCount=1]/
descendant::*/ClassOrInterfaceType[@Image="ConcurrentHashMap"]/TypeArguments)
]
[
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Set"]/descendant::*/TypeArgument]
/VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression
]
[
following-sibling::*[MethodDeclaration]
[count(descendant::*[@Synchronized="true"])=0]
[count(descendant::*/SynchronizedStatement)=0]
/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")
]
|
//ClassOrInterfaceBodyDeclaration
[not(
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="List"]
/descendant::*/TypeArgument]/VariableDeclarator/VariableInitializer/
Expression/PrimaryExpression/PrimarySuffix[preceding-sibling::*[position()=1 and self::PrimaryPrefix]/Name[@Image="Collections.synchronizedList"]]/Arguments)
]
[
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="List"]/descendant::*/TypeArgument]
/VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression
]
[
following-sibling::*[MethodDeclaration]
[count(descendant::*[@Synchronized="true"])=0]
[count(descendant::*/SynchronizedStatement)=0]
/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".add")
]
|
//ClassOrInterfaceBodyDeclaration
[not(
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map"]
/descendant::*/TypeArgument]/VariableDeclarator/VariableInitializer/
Expression/PrimaryExpression/PrimarySuffix[preceding-sibling::*[position()=1 and self::PrimaryPrefix]/Name[@Image="Collections.synchronizedMap"]]/Arguments)
]
[
FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map"]/descendant::*/TypeArgument]
/VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression
]
[
following-sibling::*[MethodDeclaration]
[count(descendant::*[@Synchronized="true"])=0]
[count(descendant::*/SynchronizedStatement)=0]
/descendant::*/Name/@Image=concat(FieldDeclaration/VariableDeclarator/VariableDeclaratorId/@Image, ".put")
]]]></value></property></properties><example><![CDATA[public class OperateUnsynchronizedCollection {
     Set<String> unsafeSet = null;
     List<String> unsafeList = null;
     Map<String, String> unsafeMap = null;
 
     Set<String> safeSet = null;
     List<String> safeList = null;
     Map<String, String> safeMap = null;
 
     OperateUnsynchronizedCollection() {
         unsafeSet = new HashSet<String>();
         safeSet = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
         unsafeList = new ArrayList<String>();
         safeList = Collections.synchronizedList(new ArrayList<String>());
         unsafeMap = new HashMap<String, String>();
         safeMap = Collections.synchronizedMap(new HashMap<String, String>());
     }
 
     public void correctPutSafeSet() {
         safeSet.add("A");
         safeList.add("A");
         safeMap.put("K", "V");
     }
 
     public void CorrectPutUnsafeSet() {
         synchronized (unsafeSet) {
             safeSet.add("A");
         }
 
         synchronized (unsafeSet) {
             safeList.add("A");
         }
 
         synchronized (safeMap) {
             safeMap.put("K", "V");
         }
     }
 
     public void wrongPutUnsafeSet() {
         unsafeSet.add("A");
         unsafeList.add("A");
         unsafeMap.put("K", "V");
     }
}]]></example></rule><rule name="LegacyUsageForLoop" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=8"><description>You'd better not use legacy of For loop.</description><priority>2</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
[starts-with(
descendant::*/ForStatement/descendant::*/BlockStatement/descendant::*/PrimaryPrefix/Name/@Image,
concat(preceding-sibling::*/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image='List' or @Image='Set']]/VariableDeclarator/VariableDeclaratorId/@Image, ".")
)]/descendant::*/ForStatement
[
ForUpdate/descendant::*/PrimaryPrefix/Name/@Image=
Statement/descendant::*/PrimaryExpression/PrimarySuffix/descendant::*/Name/@Image
]
|
//BlockStatement
[
starts-with(descendant::*/ForStatement/Expression
/RelationalExpression/PrimaryExpression[2]/PrimaryPrefix/Name/@Image,
previous-sibiling/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="String"]]/VariableDeclarator/VariableDeclaratorId/@Image)
]
[
starts-with(descendant::*/ForStatement/Expression
/RelationalExpression/PrimaryExpression[2]/PrimaryPrefix/Name/@Image,
descendant::*/ForStatement/Statement/descendant::*/PrimaryExpression/PrimaryPrefix/Name/@Image)
]
[
ends-with(descendant::*/ForStatement/Expression
/RelationalExpression/PrimaryExpression[2]/PrimaryPrefix/Name/@Image,".length")
]
|
//BlockStatement
[ends-with(
Statement/WhileStatement/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name/@Image,".hasNext"
)]
[starts-with(
Statement/WhileStatement/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name/@Image,
preceding-sibling/LocalVariableDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Iterator"]]/VariableDeclarator/VariableDeclaratorId/@Image
)]
[ends-with(
Statement/WhileStatement/Statement/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount=0]]/Name/@Image,".next"
)]]]></value></property></properties><example><![CDATA[public class LegacyUsage {
     public void correctIterate() {
         String[] strs = { "A", "B", "C", "D" };
         for (String str : strs) {
             assert (str != null);
         }
         List<String> strList = Arrays.asList(strs);
         for (String str : strList) {
             assert (str != null);
         }
 
         Set<String> strSet = new HashSet<String>(strList);
         for (String str : strSet) {
             assert (str != null);
         }
     }
 
     public void wrongIterate() {
         String[] strs = { "E", "F", "G", "H" };
         for (int i = 0; i < strs.length; i++) {
             assert (strs[i] != null);
         }
         List<String> strList = Arrays.asList(strs);
         Iterator<String> it = strList.iterator();
         while (it.hasNext()) {
             assert (it.next() != null);
         }
 
         Set<String> strSet = new HashSet<String>(strList);
         Iterator<String> itr = strSet.iterator();
         while (itr.hasNext()) {
             assert (itr.next() != null);
         }
     }
}]]></example></rule><rule name="UnspecifyTargetTypeInArrayConversion" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=9"><description>You'd better specify target type in array conversion.</description><priority>2</priority><properties><property name="xpath"><value><![CDATA[//CastExpression[Type/ReferenceType/ClassOrInterfaceType[@Image != "Object"]]//PrimaryExpression
[
PrimaryPrefix/Name[ends-with(@Image, '.toArray')]
and
PrimarySuffix/Arguments[count(*) = 0]
and
count(PrimarySuffix) = 1
]]]></value></property></properties><example><![CDATA[public class UnspecifyTargetTypeInArrayConversion {
     List<String> strList = new ArrayList<String>();
     {
 
         strList.add("A");
         strList.add("B");
         strList.add("C");
     }
 
     public String[] correctArrayConversion() {
 
         return strList.toArray(new String[0]);
     }
 
     public String[] wrongArrayConversion() {
 
         return (String[]) strList.toArray();
     }
}]]></example></rule><rule name="ExpensiveOperationsInSynchronizedBlock" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=10"><description>There're some expensive operations in synchronized block.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//ClassOrInterfaceBodyDeclaration
[
descendant::*/BlockStatement/Statement/SynchronizedStatement
[
descendant::*/BlockStatement/descendant::*/PrimaryExpression/PrimarySuffix[preceding-sibling::*[position()=1 and self::PrimaryPrefix]/Name[@Image="costMethod" or @Image="processItem"]]/Arguments[@ArgumentCount>=0]
]
/Expression/PrimaryExpression/PrimaryPrefix/Name/@Image=
preceding-sibling::*/FieldDeclaration[Type/ReferenceType/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]/TypeArguments]/VariableDeclarator/VariableDeclaratorId/@Image
]
/MethodDeclaration/MethodDeclarator]]></value></property></properties><example><![CDATA[public class LoopExpensiveOperationsInSynchronizedBlock {
     List<String> strList = new ArrayList<String>();
     {
 
         strList.add("A");
         strList.add("B");
         strList.add("C");
     }
     
     public void excludeExpensiveOperation() {
         synchronized (strList) {
             strList.add("E");
         }
         costMethod();
     }
     
     public void includeExpensiveOperation() {
         synchronized (strList) {
             strList.add("F");
             costMethod();
         }
     }
     
     public void costMethod() {
         
     }
}]]></example></rule><rule name="SynchronizeCollectionWithLockVariable" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=11"><description>You'd better use synchronize collection with lock variables.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//ClassOrInterfaceBodyDeclaration
[
starts-with(MethodDeclaration/descendant::*/BlockStatement
[ends-with(preceding-sibling::*/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments]/Name/@Image,'.lock')]
/descendant::*/BlockStatement/descendant::*/PrimaryExpression/PrimaryPrefix[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments]/Name/@Image,
concat(preceding-sibling::*/FieldDeclaration[descendant::*/ClassOrInterfaceType[@Image="Map" or @Image="Set" or @Image="List"]]/descendant::*/VariableDeclaratorId/@Image,'.'))
]
/MethodDeclaration/MethodDeclarator]]></value></property></properties><example><![CDATA[/* 
  * Correct:
  * Map<String, Data> m = Collections.synchronizedMap(new HashMap<String, Data>());
  */
 
 public class SynchronizeCollectionWithLockVariable {
     private final Map<String, Data> m = new HashMap<String, Data>();
     private final ReadWriteLock rwl = new ReentrantReadWriteLock();
     private final Lock r = rwl.readLock();
     private final Lock w = rwl.writeLock();
 
     public Data get(String key) {
         r.lock();
         try {
             return m.get(key);
         } finally {
             r.unlock();
         }
     }
 
     public String[] allKeys() {
         r.lock();
         try {
             return m.keySet().toArray(new String[0]);
         } finally {
             r.unlock();
         }
     }
 
     public Data put(String key, Data value) {
         w.lock();
         try {
             return m.put(key, value);
         } finally {
             w.unlock();
         }
     }
 
     public void clear() {
         w.lock();
         try {
             m.clear();
         } finally {
             w.unlock();
         }
     }
 
     class Data {
         String name;
 		
         public String getName() {return name;}
         public void setName(String name) {this.name = name;}
     }
}
 ]]></example></rule><rule name="UseSynchronizedSet" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=12"><description>You'd better use ConcurrentHashMap instead of SynchronizedSet.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement/descendant::*/PrimaryExpression/PrimaryPrefix
[starts-with(Name/@Image,'Collections.')]
[ends-with(Name/@Image,'.synchronizedSet')]
[following-sibling::*[position()=1 and self::PrimarySuffix]/Arguments[@ArgumentCount="1"]/ArgumentList/descendant::*/
AllocationExpression[ClassOrInterfaceType[@Image="HashSet"]]/Arguments[@ArgumentCount="0"]]]]></value></property></properties><example><![CDATA[public class UseSynchronizedSet {
 
     public Set<String> correctGetSafeSet() {
         return Collections
             .newSetFromMap(new ConcurrentHashMap<String, Boolean>());
     }
 
     public Set<String> wrongGetSafeSet() {
         return Collections.synchronizedSet(new HashSet<String>());
     }
}]]></example></rule><rule name="CallCombinativeFunctionTwiceOrMore" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=13"><description>It'll call combinative function twice Or more times.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//Statement[ForStatement]
[
descendant::*/Statement[descendant::*/BlockStatement/descendant::*/PrimaryExpression
[PrimaryPrefix/Name[@Image="cominativeMethod" or @Image="serviceA.call" or @Image="processRow" or @Image="Configuration.getInstance"]]
/PrimarySuffix/Arguments[@ArgumentCount="1"]/ArgumentList/descendant::*/PrimaryPrefix/Name/@Image=
ancestor::*/ForStatement/LocalVariableDeclaration/VariableDeclarator/VariableDeclaratorId/@Image]
]
|
//ClassOrInterfaceBodyDeclaration/descendant::*/BlockStatement
[
descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount>0]]/PrimaryPrefix/Name[@Image="cominativeMethod" or @Image="serviceA.call" or @Image="processRow" or @Image="Configuration.getInstance"]/@Image=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount>0]]/PrimaryPrefix/Name/@Image
]
[
descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@IntLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@IntLiteral
]
[
descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@FloatLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@FloatLiteral
]
[
descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@CharLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@CharLiteral
]
[
descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@StringLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@StringLiteral
]
[
descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@SingleCharacterStringLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@SingleCharacterStringLiteral
]
[not(
descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@Image=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@Image)
]
/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount>0]]/PrimaryPrefix/Name[@Image="cominativeMethod" or @Image="serviceA.call" or @Image="processRow" or @Image="Configuration.getInstance"]
|
//ClassOrInterfaceBodyDeclaration
[
descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount>0]]/PrimaryPrefix/Name[@Image="cominativeMethod" or @Image="serviceA.call" or @Image="processRow" or @Image="Configuration.getInstance"]/@Image=
preceding-sibling::*/descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount>0]]/PrimaryPrefix/Name/@Image
]
[not(
descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[not(@Image="")]/@Image=
preceding-sibling::*/descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[not(@Image="")]/@Image)
]
[
descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@IntLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@IntLiteral
]
[
descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@FloatLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@FloatLiteral
]
[
descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@CharLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@CharLiteral
]
[
descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@StringLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@StringLiteral
]
[
descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@SingleCharacterStringLiteral=
preceding-sibling::*/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/@SingleCharacterStringLiteral
]
/descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount>0]]/PrimaryPrefix/Name[@Image="cominativeMethod" or @Image="serviceA.call" or @Image="processRow" or @Image="Configuration.getInstance"]
|
//ClassOrInterfaceBodyDeclaration
[
descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount>=0]]/PrimaryPrefix/Name[@Image="cominativeMethod" or @Image="serviceA.call" or @Image="processRow" or @Image="Configuration.getInstance"]/@Image=
preceding-sibling::*/descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount>=0]]/PrimaryPrefix/Name/@Image
]
[not(
descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>=0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[not(@Image="")]/@Image=
preceding-sibling::*/descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimaryPrefix/Name]/PrimarySuffix/Arguments[@ArgumentCount>=0]
/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[not(@Image="")]/@Image)
]
/descendant::*/BlockStatement/descendant::*/PrimaryExpression[PrimarySuffix/Arguments[@ArgumentCount>=0]]/PrimaryPrefix/Name[@Image="cominativeMethod" or @Image="serviceA.call" or @Image="processRow" or @Image="Configuration.getInstance"]]]></value></property></properties><example><![CDATA[public class CallCombinativeFunctionTwiceOrMore {
     public void correctCallMethods() {
         cominativeMethod(new String[] { "A", "B" });
     }
 
     public void wrongCallMethods() {
         cominativeMethod("A");
         cominativeMethod("B");
     }
 
     void cominativeMethod(String s) {
 
     }
 
     void cominativeMethod(String[] s) {
 
     }
}]]></example></rule><rule name="ComputationalComplexityProblem" language="java" since="5.0" scope="inner-class" message="" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="pattern.jsp?id=14"><description>It  will cause the high computational time complexity.</description><priority>1</priority><properties><property name="xpath"><value><![CDATA[//BlockStatement
[count(
Statement[ForStatement or WhileStatement or DoStatement]
/descendant::*/Statement[ForStatement or WhileStatement or DoStatement]
)>0]]]></value></property></properties><example><![CDATA[public class ComputationalComplexityProblem {
     public void squareOfNComputation() {
         int[] nums = { 3, 1, 2 };
         int sum = 0;
         for (int i : nums){
             for (int j : nums) {
                 sum += i * j;
             }
         }
     }
}]]></example></rule></ruleset>